[debug] [2023-09-13T15:35:07.297Z] ----------------------------------------------------------------------
[debug] [2023-09-13T15:35:07.299Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\justi\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js deploy -P prod
[debug] [2023-09-13T15:35:07.299Z] CLI Version:   12.4.6
[debug] [2023-09-13T15:35:07.299Z] Platform:      win32
[debug] [2023-09-13T15:35:07.299Z] Node Version:  v18.16.0
[debug] [2023-09-13T15:35:07.300Z] Time:          Wed Sep 13 2023 07:35:07 GMT-0800 (Alaska Daylight Time)
[debug] [2023-09-13T15:35:07.300Z] ----------------------------------------------------------------------
[debug] 
[debug] [2023-09-13T15:35:07.349Z] Object ".extensions" in "firebase.json" has unknown property: {"additionalProperty":"firestore-stripe-payments"}
[debug] [2023-09-13T15:35:07.352Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-09-13T15:35:07.352Z] > authorizing via signed-in user (routeworksllc@gmail.com)
[debug] [2023-09-13T15:35:07.352Z] [iam] checking project route-manager-5f65b for permissions ["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasehosting.sites.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create",null]
[debug] [2023-09-13T15:35:07.353Z] > refreshing access token with scopes: []
[debug] [2023-09-13T15:35:07.354Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2023-09-13T15:35:07.354Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-09-13T15:35:07.550Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2023-09-13T15:35:07.550Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-09-13T15:35:07.554Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions [none]
[debug] [2023-09-13T15:35:07.554Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:07.554Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasehosting.sites.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create",null]}
[debug] [2023-09-13T15:35:07.784Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions 200
[debug] [2023-09-13T15:35:07.784Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["cloudfunctions.functions.create","cloudfunctions.functions.delete","cloudfunctions.functions.get","cloudfunctions.functions.list","cloudfunctions.functions.update","cloudfunctions.operations.get","datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get","firebasehosting.sites.update","firebaserules.releases.create","firebaserules.releases.update","firebaserules.rulesets.create"]}
[debug] [2023-09-13T15:35:07.784Z] [iam] error while checking permissions, command may fail: FirebaseError: Authorization failed. This account is missing the following required permissions on project route-manager-5f65b:

  
[debug] [2023-09-13T15:35:07.784Z] >>> [apiv2][query] POST https://iam.googleapis.com/v1/projects/route-manager-5f65b/serviceAccounts/route-manager-5f65b@appspot.gserviceaccount.com:testIamPermissions [none]
[debug] [2023-09-13T15:35:07.785Z] >>> [apiv2][body] POST https://iam.googleapis.com/v1/projects/route-manager-5f65b/serviceAccounts/route-manager-5f65b@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[debug] [2023-09-13T15:35:07.982Z] <<< [apiv2][status] POST https://iam.googleapis.com/v1/projects/route-manager-5f65b/serviceAccounts/route-manager-5f65b@appspot.gserviceaccount.com:testIamPermissions 200
[debug] [2023-09-13T15:35:07.982Z] <<< [apiv2][body] POST https://iam.googleapis.com/v1/projects/route-manager-5f65b/serviceAccounts/route-manager-5f65b@appspot.gserviceaccount.com:testIamPermissions {"permissions":["iam.serviceAccounts.actAs"]}
[debug] [2023-09-13T15:35:07.983Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:08.238Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:08.238Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[info] 
[info] === Deploying to 'route-manager-5f65b'...
[info] 
[info] i  deploying storage, firestore, functions, hosting, extensions 
[info] Running command: npm --prefix "$RESOURCE_DIR" run lint
[info] +  functions: Finished running predeploy script. 
[debug] [2023-09-13T15:35:09.330Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:09.538Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:09.538Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[info] i  firebase.storage: checking storage.rules for compilation errors... 
[debug] [2023-09-13T15:35:09.539Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test [none]
[debug] [2023-09-13T15:35:09.539Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test [omitted]
[debug] [2023-09-13T15:35:10.034Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test 200
[debug] [2023-09-13T15:35:10.034Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test {}
[info] +  firebase.storage: rules file storage.rules compiled successfully 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2023-09-13T15:35:10.036Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test [none]
[debug] [2023-09-13T15:35:10.036Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test [omitted]
[debug] [2023-09-13T15:35:10.445Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test 200
[debug] [2023-09-13T15:35:10.445Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b:test {}
[info] +  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2023-09-13T15:35:10.446Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:10.689Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:10.689Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[info] i  functions: preparing codebase default for deployment 
[info] i  functions: ensuring required API cloudfunctions.googleapis.com is enabled... 
[info] i  functions: ensuring required API cloudbuild.googleapis.com is enabled... 
[info] i  artifactregistry: ensuring required API artifactregistry.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:10.691Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudfunctions.googleapis.com [none]
[debug] [2023-09-13T15:35:10.691Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudfunctions.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:10.691Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/runtimeconfig.googleapis.com [none]
[debug] [2023-09-13T15:35:10.691Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/runtimeconfig.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:10.692Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudbuild.googleapis.com [none]
[debug] [2023-09-13T15:35:10.692Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudbuild.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:10.693Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/artifactregistry.googleapis.com [none]
[debug] [2023-09-13T15:35:10.693Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/artifactregistry.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:11.247Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudfunctions.googleapis.com 200
[debug] [2023-09-13T15:35:11.247Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudfunctions.googleapis.com [omitted]
[info] +  functions: required API cloudfunctions.googleapis.com is enabled 
[debug] [2023-09-13T15:35:11.249Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/runtimeconfig.googleapis.com 200
[debug] [2023-09-13T15:35:11.249Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/runtimeconfig.googleapis.com [omitted]
[debug] [2023-09-13T15:35:11.259Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudbuild.googleapis.com 200
[debug] [2023-09-13T15:35:11.259Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudbuild.googleapis.com [omitted]
[info] +  functions: required API cloudbuild.googleapis.com is enabled 
[debug] [2023-09-13T15:35:11.278Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/artifactregistry.googleapis.com 200
[debug] [2023-09-13T15:35:11.278Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/artifactregistry.googleapis.com [omitted]
[info] +  artifactregistry: required API artifactregistry.googleapis.com is enabled 
[debug] [2023-09-13T15:35:11.279Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig [none]
[debug] [2023-09-13T15:35:11.527Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig 200
[debug] [2023-09-13T15:35:11.527Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig {"projectId":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"}
[debug] [2023-09-13T15:35:11.528Z] >>> [apiv2][query] GET https://runtimeconfig.googleapis.com/v1beta1/projects/route-manager-5f65b/configs [none]
[debug] [2023-09-13T15:35:11.837Z] <<< [apiv2][status] GET https://runtimeconfig.googleapis.com/v1beta1/projects/route-manager-5f65b/configs 200
[debug] [2023-09-13T15:35:11.837Z] <<< [apiv2][body] GET https://runtimeconfig.googleapis.com/v1beta1/projects/route-manager-5f65b/configs {}
[debug] [2023-09-13T15:35:11.839Z] Validating nodejs source
[debug] [2023-09-13T15:35:12.883Z] > [functions] package.json contents: {
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint",
    "serve": "firebase emulators:start",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "16"
  },
  "main": "index.js",
  "dependencies": {
    "body-parser": "^1.20.0",
    "cors": "^2.8.5",
    "express": "^4.18.1",
    "firebase": "^9.9.1",
    "firebase-admin": "^10.2.0",
    "firebase-functions": "^4.4.1",
    "stripe": "^12.10.0"
  },
  "devDependencies": {
    "eslint": "7.5",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^0.2.0"
  },
  "private": true
}
[debug] [2023-09-13T15:35:12.883Z] Building nodejs source
[info] i  functions: Loading and analyzing source code for codebase default to determine what to deploy 
[debug] [2023-09-13T15:35:12.884Z] Could not find functions.yaml. Must use http discovery
[debug] [2023-09-13T15:35:12.892Z] Found firebase-functions binary at 'C:\Users\justi\Code\route-manager-firebase\functions\node_modules\.bin\firebase-functions'
[info] Serving at port 8735

[debug] [2023-09-13T15:35:13.611Z] Got response from /__/functions.yaml {"endpoints":{"listUsers":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"listUsers"},"createOrg":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"createOrg"},"createStripeCustomers":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"createStripeCustomers"},"createInvoiceItems":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"createInvoiceItems"},"getPendingBalances":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"getPendingBalances"},"sendInvoices":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"sendInvoices"},"createUser":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"createUser"},"updateUser":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"updateUser"},"deleteUser":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"deleteUser"},"scheduledBackup":{"platform":"gcfv1","availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"serviceAccountEmail":null,"vpc":null,"scheduleTrigger":{"schedule":"0 0 * * *","retryConfig":{"retryCount":null,"maxDoublings":null,"maxRetryDuration":null,"maxBackoffDuration":null,"minBackoffDuration":null},"timeZone":null},"labels":{},"entryPoint":"scheduledBackup"},"updateLogEntry":{"platform":"gcfv1","availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"serviceAccountEmail":null,"vpc":null,"eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.update","eventFilters":{"resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/service_logs/{itemID}"},"retry":false},"labels":{},"entryPoint":"updateLogEntry"},"deleteLogEntry":{"platform":"gcfv1","availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"serviceAccountEmail":null,"vpc":null,"eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.delete","eventFilters":{"resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/service_logs/{itemID}"},"retry":false},"labels":{},"entryPoint":"deleteLogEntry"},"createCustomer":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"eventTrigger":{"eventType":"google.cloud.firestore.document.v1.created","eventFilters":{"database":"(default)","namespace":"(default)"},"eventFilterPathPatterns":{"document":"organizations/{organization}/customer/{itemID}"},"retry":false},"entryPoint":"createCustomer"},"updateCustomer":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"eventTrigger":{"eventType":"google.cloud.firestore.document.v1.updated","eventFilters":{"database":"(default)","namespace":"(default)"},"eventFilterPathPatterns":{"document":"organizations/{organization}/customer/{itemID}"},"retry":false},"entryPoint":"updateCustomer"},"writeCustomer":{"platform":"gcfv1","availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"serviceAccountEmail":null,"vpc":null,"eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","eventFilters":{"resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/customer/{itemID}"},"retry":false},"labels":{},"entryPoint":"writeCustomer"},"createStripeConnectedAccount":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"createStripeConnectedAccount"},"getAccountLink":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"getAccountLink"},"connectLogsToCust":{"availableMemoryMb":null,"timeoutSeconds":null,"minInstances":null,"maxInstances":null,"ingressSettings":null,"concurrency":null,"serviceAccountEmail":null,"vpc":null,"platform":"gcfv2","labels":{},"callableTrigger":{},"entryPoint":"connectLogsToCust"}},"specVersion":"v1alpha1","requiredAPIs":[{"api":"cloudscheduler.googleapis.com","reason":"Needed for scheduled functions."}],"params":[{"type":"secret","name":"STRIPE_KEY"}]}
[info] shutdown requested via /__/quitquitquit

[debug] [2023-09-13T15:35:13.632Z] >>> [apiv2][query] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY [none]
[debug] [2023-09-13T15:35:13.907Z] <<< [apiv2][status] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY 200
[debug] [2023-09-13T15:35:13.907Z] <<< [apiv2][body] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY {"name":"projects/286820515500/secrets/STRIPE_KEY","replication":{"automatic":{}},"createTime":"2023-07-04T19:50:53.128704Z","labels":{"firebase-managed":"true"},"etag":"\"15ffae99ca7800\""}
[debug] [2023-09-13T15:35:13.907Z] >>> [apiv2][query] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY/versions/latest [none]
[info] i  functions: preparing functions directory for uploading... 
[info] i  functions: packaged C:\Users\justi\Code\route-manager-firebase\functions (51.65 KB) for uploading 
[info] i  functions: packaged C:\Users\justi\Code\route-manager-firebase\functions (51.89 KB) for uploading 
[debug] [2023-09-13T15:35:13.966Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v1/projects/route-manager-5f65b/locations/-/functions [none]
[debug] [2023-09-13T15:35:14.090Z] <<< [apiv2][status] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY/versions/latest 200
[debug] [2023-09-13T15:35:14.090Z] <<< [apiv2][body] GET https://secretmanager.googleapis.com/v1/projects/route-manager-5f65b/secrets/STRIPE_KEY/versions/latest {"name":"projects/286820515500/secrets/STRIPE_KEY/versions/1","createTime":"2023-07-04T19:50:53.865062Z","state":"ENABLED","replicationStatus":{"automatic":{}},"etag":"\"15ffae99d5b466\""}
[debug] [2023-09-13T15:35:14.512Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v1/projects/route-manager-5f65b/locations/-/functions 200
[debug] [2023-09-13T15:35:14.512Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v1/projects/route-manager-5f65b/locations/-/functions {"functions":[{"name":"projects/route-manager-5f65b/locations/us-central1/functions/deleteLogEntry","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.delete","resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/service_logs/{itemID}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"deleteLogEntry","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"route-manager-5f65b@appspot.gserviceaccount.com","updateTime":"2023-09-08T21:58:45.919Z","versionId":"119","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"4322b0bcab88c4ce252fc6e75778b2555488238a"},"sourceUploadUrl":"https://storage.googleapis.com/uploads-385253866388.us-central1.cloudfunctions.appspot.com/ef6d0a50-383e-476e-9524-d9d89e2e134f.zip","environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/functions/deleteLogEntry"},"runtime":"nodejs16","maxInstances":3000,"ingressSettings":"ALLOW_ALL","buildId":"ddd54520-e9a4-49f3-824e-c03804261515","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"buildName":"projects/286820515500/locations/us-central1/builds/ddd54520-e9a4-49f3-824e-c03804261515","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-createCheckoutSession","description":"Creates a Checkout session to collect the customer's payment details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.create","resource":"projects/route-manager-5f65b/databases/(default)/documents/customers/{uid}/checkout_sessions/{id}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"createCheckoutSession","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:31:45.633Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"d48e7236-62a2-4d72-ac7c-fa7f3856e996","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/d48e7236-62a2-4d72-ac7c-fa7f3856e996","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-createCustomer","description":"Creates a Stripe customer object when a new user signs up.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.create","resource":"projects/route-manager-5f65b","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"createCustomer","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:31:45.962Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"1d2395a2-ce07-4659-a74e-55a11036230f","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/1d2395a2-ce07-4659-a74e-55a11036230f","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-createPortalLink","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","httpsTrigger":{"url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/ext-firestore-stripe-payments-createPortalLink","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"createPortalLink","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:31:39.549Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","ingressSettings":"ALLOW_ALL","buildId":"4ef5e95e-c495-4a9a-8ab8-12c68c638dda","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/4ef5e95e-c495-4a9a-8ab8-12c68c638dda","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-handleWebhookEvents","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","httpsTrigger":{"url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/ext-firestore-stripe-payments-handleWebhookEvents","securityLevel":"SECURE_OPTIONAL"},"status":"ACTIVE","entryPoint":"handleWebhookEvents","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:32:10.229Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","ingressSettings":"ALLOW_ALL","buildId":"0e7324ab-1948-4938-8621-3493d74b7452","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/0e7324ab-1948-4938-8621-3493d74b7452","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-onCustomerDataDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.delete","resource":"projects/route-manager-5f65b/databases/(default)/documents/customers/{uid}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"onCustomerDataDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:32:52.616Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"650f5572-6a05-4f88-8951-7732baed95a2","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/650f5572-6a05-4f88-8951-7732baed95a2","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/ext-firestore-stripe-payments-onUserDeleted","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","sourceArchiveUrl":"gs://firebase-mod-sources-prod/cf7d5a0cf8fa1375b009b304631f059e5ef84fad65c179266e1889d092765f0c","eventTrigger":{"eventType":"providers/firebase.auth/eventTypes/user.delete","resource":"projects/route-manager-5f65b","service":"firebaseauth.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"onUserDeleted","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","updateTime":"2023-09-07T06:31:48.283Z","versionId":"2","labels":{"firebase-extensions-ar":"enabled","goog-dm":"firebase-ext-firestore-stripe-payments","goog-firebase-ext":"firestore-stripe-payments","deployment-tool":"firebase-extensions","goog-firebase-ext-iid":"firestore-stripe-payments"},"environmentVariables":{"CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers","DATABASE_INSTANCE":"","DATABASE_URL":"","DELETE_STRIPE_CUSTOMERS":"Do not delete","EVENTARC_CHANNEL":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","EVENTARC_CLOUD_EVENT_SOURCE":"//firebaseextensions.googleapis.com/extensions/projects/route-manager-5f65b/instances/firestore-stripe-payments","EXT_INSTANCE_ID":"firestore-stripe-payments","EXT_SELECTED_EVENTS":"com.stripe.v1.product.created,com.stripe.v1.product.updated,com.stripe.v1.product.deleted,com.stripe.v1.price.created,com.stripe.v1.price.updated,com.stripe.v1.price.deleted,com.stripe.v1.checkout.session.completed,com.stripe.v1.checkout.session.async_payment_succeeded,com.stripe.v1.checkout.session.async_payment_failed,com.stripe.v1.customer.subscription.created,com.stripe.v1.customer.subscription.updated,com.stripe.v1.customer.subscription.deleted,com.stripe.v1.tax_rate.created,com.stripe.v1.tax_rate.updated,com.stripe.v1.invoice.paid,com.stripe.v1.invoice.payment_succeeded,com.stripe.v1.invoice.payment_failed,com.stripe.v1.invoice.upcoming,com.stripe.v1.invoice.marked_uncollectible,com.stripe.v1.invoice.payment_action_required,com.stripe.v1.payment_intent.processing,com.stripe.v1.payment_intent.succeeded,com.stripe.v1.payment_intent.canceled,com.stripe.v1.payment_intent.payment_failed","FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"databaseURL\":\"\",\"storageBucket\":\"route-manager-5f65b.appspot.com\"}","GCLOUD_PROJECT":"route-manager-5f65b","LOCATION":"us-central1","PRODUCTS_COLLECTION":"products","PROJECT_ID":"route-manager-5f65b","STORAGE_BUCKET":"route-manager-5f65b.appspot.com","STRIPE_CONFIG_COLLECTION":"configuration","SYNC_USERS_ON_CREATE":"Do not sync"},"runtime":"nodejs14","maxInstances":3000,"ingressSettings":"ALLOW_INTERNAL_ONLY","buildId":"c1eb7a8d-a6d2-46d6-a052-20dfabb0a42b","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"secretEnvironmentVariables":[{"key":"STRIPE_API_KEY","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_API_KEY","version":"3"},{"key":"STRIPE_WEBHOOK_SECRET","projectId":"286820515500","secret":"firestore-stripe-payments-STRIPE_WEBHOOK_SECRET","version":"3"}],"buildName":"projects/286820515500/locations/us-central1/builds/c1eb7a8d-a6d2-46d6-a052-20dfabb0a42b","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/scheduledBackup","eventTrigger":{"eventType":"google.pubsub.topic.publish","resource":"projects/route-manager-5f65b/topics/firebase-schedule-scheduledBackup-us-central1","service":"pubsub.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"scheduledBackup","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"route-manager-5f65b@appspot.gserviceaccount.com","updateTime":"2023-09-08T21:58:45.187Z","versionId":"38","labels":{"deployment-tool":"cli-firebase","deployment-scheduled":"true","firebase-functions-hash":"4322b0bcab88c4ce252fc6e75778b2555488238a"},"sourceUploadUrl":"https://storage.googleapis.com/uploads-385253866388.us-central1.cloudfunctions.appspot.com/ef6d0a50-383e-476e-9524-d9d89e2e134f.zip","environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/functions/scheduledBackup","BUCKET":"cron-backups"},"runtime":"nodejs16","maxInstances":3000,"ingressSettings":"ALLOW_ALL","buildId":"ddd54520-e9a4-49f3-824e-c03804261515","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"buildName":"projects/286820515500/locations/us-central1/builds/ddd54520-e9a4-49f3-824e-c03804261515","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/updateLogEntry","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.update","resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/service_logs/{itemID}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"updateLogEntry","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"route-manager-5f65b@appspot.gserviceaccount.com","updateTime":"2023-09-08T21:58:47.178Z","versionId":"119","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"4322b0bcab88c4ce252fc6e75778b2555488238a"},"sourceUploadUrl":"https://storage.googleapis.com/uploads-385253866388.us-central1.cloudfunctions.appspot.com/ef6d0a50-383e-476e-9524-d9d89e2e134f.zip","environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/functions/updateLogEntry"},"runtime":"nodejs16","maxInstances":3000,"ingressSettings":"ALLOW_ALL","buildId":"ddd54520-e9a4-49f3-824e-c03804261515","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"buildName":"projects/286820515500/locations/us-central1/builds/ddd54520-e9a4-49f3-824e-c03804261515","dockerRegistry":"ARTIFACT_REGISTRY"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/writeCustomer","eventTrigger":{"eventType":"providers/cloud.firestore/eventTypes/document.write","resource":"projects/route-manager-5f65b/databases/(default)/documents/organizations/{organization}/customer/{itemID}","service":"firestore.googleapis.com","failurePolicy":{}},"status":"ACTIVE","entryPoint":"writeCustomer","timeout":"60s","availableMemoryMb":256,"serviceAccountEmail":"route-manager-5f65b@appspot.gserviceaccount.com","updateTime":"2023-09-08T21:58:48.110Z","versionId":"37","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"4322b0bcab88c4ce252fc6e75778b2555488238a"},"sourceUploadUrl":"https://storage.googleapis.com/uploads-385253866388.us-central1.cloudfunctions.appspot.com/ef6d0a50-383e-476e-9524-d9d89e2e134f.zip","environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/functions/writeCustomer"},"runtime":"nodejs16","maxInstances":3000,"ingressSettings":"ALLOW_ALL","buildId":"ddd54520-e9a4-49f3-824e-c03804261515","buildEnvironmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"buildName":"projects/286820515500/locations/us-central1/builds/ddd54520-e9a4-49f3-824e-c03804261515","dockerRegistry":"ARTIFACT_REGISTRY"}]}
[debug] [2023-09-13T15:35:14.513Z] >>> [apiv2][query] GET https://cloudfunctions.googleapis.com/v2/projects/route-manager-5f65b/locations/-/functions filter=environment%3D%22GEN_2%22
[debug] [2023-09-13T15:35:15.181Z] <<< [apiv2][status] GET https://cloudfunctions.googleapis.com/v2/projects/route-manager-5f65b/locations/-/functions 200
[debug] [2023-09-13T15:35:15.181Z] <<< [apiv2][body] GET https://cloudfunctions.googleapis.com/v2/projects/route-manager-5f65b/locations/-/functions {"functions":[{"name":"projects/route-manager-5f65b/locations/us-central1/functions/connectLogsToCust","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/f0b6990e-1a98-4898-8438-a42716a83a17","runtime":"nodejs16","entryPoint":"connectLogsToCust","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"connectLogsToCust/function-source.zip","generation":"1694210263593700"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"connectLogsToCust/function-source.zip","generation":"1694210263593700"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/connectlogstocust","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/connectLogsToCust"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://connectlogstocust-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"connectlogstocust-00009-som","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T22:00:00.504793305Z","labels":{"deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/connectLogsToCust"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createStripeConnectedAccount","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/a24a3cec-673b-404e-aaa7-8c1f70cc37ab","runtime":"nodejs16","entryPoint":"createStripeConnectedAccount","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createStripeConnectedAccount/function-source.zip","generation":"1694210263538139"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createStripeConnectedAccount/function-source.zip","generation":"1694210263538139"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createstripeconnectedaccount","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createStripeConnectedAccount"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createstripeconnectedaccount-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createstripeconnectedaccount-00012-riq","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:25.477417522Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createStripeConnectedAccount"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/deleteUser","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/c1916e19-ef30-48a2-85dc-c2b27cea14fa","runtime":"nodejs16","entryPoint":"deleteUser","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"deleteUser/function-source.zip","generation":"1694210263532299"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"deleteUser/function-source.zip","generation":"1694210263532299"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/deleteuser","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/deleteUser"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://deleteuser-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"deleteuser-00009-nip","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:27.905841819Z","labels":{"deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/deleteUser"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/getPendingBalances","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/d3388b0f-7e30-4b34-b476-50a8d911de33","runtime":"nodejs16","entryPoint":"getPendingBalances","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"getPendingBalances/function-source.zip","generation":"1694210263538200"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"getPendingBalances/function-source.zip","generation":"1694210263538200"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/getpendingbalances","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/getPendingBalances"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://getpendingbalances-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"getpendingbalances-00008-tan","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:58:43.539931267Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/getPendingBalances"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/sendInvoices","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/47151554-ad44-47c7-ac06-8aa4c16e4564","runtime":"nodejs16","entryPoint":"sendInvoices","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"sendInvoices/function-source.zip","generation":"1694210263536442"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"sendInvoices/function-source.zip","generation":"1694210263536442"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/sendinvoices","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/sendInvoices"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://sendinvoices-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"sendinvoices-00008-dod","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:56.115516229Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/sendInvoices"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createCustomer","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/7b8de87c-bec9-464c-bc7d-9cbdd6a6556a","runtime":"nodejs16","entryPoint":"createCustomer","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createCustomer/function-source.zip","generation":"1694210263658357"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createCustomer/function-source.zip","generation":"1694210263658357"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createcustomer","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createCustomer","FUNCTION_SIGNATURE_TYPE":"cloudevent"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createcustomer-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createcustomer-00007-muz","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"eventTrigger":{"trigger":"projects/route-manager-5f65b/locations/nam5/triggers/createcustomer-948852","triggerRegion":"nam5","eventType":"google.cloud.firestore.document.v1.created","eventFilters":[{"attribute":"namespace","value":"(default)"},{"attribute":"document","value":"organizations/{organization}/customer/{itemID}","operator":"match-path-pattern"},{"attribute":"database","value":"(default)"}],"pubsubTopic":"projects/route-manager-5f65b/topics/eventarc-nam5-createcustomer-948852-289","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","retryPolicy":"RETRY_POLICY_DO_NOT_RETRY"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:22.838498202Z","labels":{"firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createCustomer"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/updateCustomer","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/0876e0e0-1c58-4096-9661-47a4b9c0b002","runtime":"nodejs16","entryPoint":"updateCustomer","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"updateCustomer/function-source.zip","generation":"1694210263571152"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"updateCustomer/function-source.zip","generation":"1694210263571152"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/updatecustomer","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/updateCustomer","FUNCTION_SIGNATURE_TYPE":"cloudevent"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://updatecustomer-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"updatecustomer-00008-vil","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"eventTrigger":{"trigger":"projects/route-manager-5f65b/locations/nam5/triggers/updatecustomer-247626","triggerRegion":"nam5","eventType":"google.cloud.firestore.document.v1.updated","eventFilters":[{"attribute":"database","value":"(default)"},{"attribute":"namespace","value":"(default)"},{"attribute":"document","value":"organizations/{organization}/customer/{itemID}","operator":"match-path-pattern"}],"pubsubTopic":"projects/route-manager-5f65b/topics/eventarc-nam5-updatecustomer-247626-698","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","retryPolicy":"RETRY_POLICY_DO_NOT_RETRY"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:14.959744726Z","labels":{"deployment-tool":"cli-firebase","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/updateCustomer"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createOrg","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/66cddf19-39db-4d4f-b773-480002f5c2db","runtime":"nodejs16","entryPoint":"createOrg","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createOrg/function-source.zip","generation":"1694210263528927"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createOrg/function-source.zip","generation":"1694210263528927"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createorg","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createOrg"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createorg-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createorg-00010-qob","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:22.494706407Z","labels":{"firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase","deployment-callable":"true"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createOrg"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createStripeCustomers","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/dace7769-5f59-458c-bbe2-8e53d9f5c7c2","runtime":"nodejs16","entryPoint":"createStripeCustomers","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createStripeCustomers/function-source.zip","generation":"1694210263537896"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createStripeCustomers/function-source.zip","generation":"1694210263537896"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createstripecustomers","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createStripeCustomers"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createstripecustomers-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createstripecustomers-00008-ves","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T22:00:15.845907042Z","labels":{"deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createStripeCustomers"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/updateUser","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/c5d02974-0bb7-438d-96dd-0d289397f598","runtime":"nodejs16","entryPoint":"updateUser","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"updateUser/function-source.zip","generation":"1694210263586472"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"updateUser/function-source.zip","generation":"1694210263586472"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/updateuser","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/updateUser"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://updateuser-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"updateuser-00009-tot","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T22:00:02.457674998Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/updateUser"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createInvoiceItems","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/1369e316-ed16-4e4f-9a2d-8958dba19d10","runtime":"nodejs16","entryPoint":"createInvoiceItems","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createInvoiceItems/function-source.zip","generation":"1694210263444382"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createInvoiceItems/function-source.zip","generation":"1694210263444382"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createinvoiceitems","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createInvoiceItems"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createinvoiceitems-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createinvoiceitems-00008-fav","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:58:43.288071201Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createInvoiceItems"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/createUser","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/32beda56-f8a1-415a-ad5f-f086166a392a","runtime":"nodejs16","entryPoint":"createUser","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createUser/function-source.zip","generation":"1694210263525209"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"createUser/function-source.zip","generation":"1694210263525209"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/createuser","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/createUser"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://createuser-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"createuser-00009-zaz","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:58:43.841298931Z","labels":{"deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b","deployment-tool":"cli-firebase"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/createUser"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/getAccountLink","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/98bad0d1-2812-4a6f-bc57-b90cfcc19dbc","runtime":"nodejs16","entryPoint":"getAccountLink","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"getAccountLink/function-source.zip","generation":"1694210263525648"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"getAccountLink/function-source.zip","generation":"1694210263525648"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/getaccountlink","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/getAccountLink"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://getaccountlink-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"getaccountlink-00012-vom","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:58:45.132536620Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/getAccountLink"},{"name":"projects/route-manager-5f65b/locations/us-central1/functions/listUsers","buildConfig":{"build":"projects/286820515500/locations/us-central1/builds/bd79dc66-8823-4277-90d1-b0be4d8d9b84","runtime":"nodejs16","entryPoint":"listUsers","source":{"storageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"listUsers/function-source.zip","generation":"1694210263560331"}},"environmentVariables":{"GOOGLE_NODE_RUN_SCRIPTS":""},"sourceProvenance":{"resolvedStorageSource":{"bucket":"gcf-v2-sources-286820515500-us-central1","object":"listUsers/function-source.zip","generation":"1694210263560331"}},"dockerRegistry":"ARTIFACT_REGISTRY"},"serviceConfig":{"service":"projects/route-manager-5f65b/locations/us-central1/services/listusers","timeoutSeconds":60,"environmentVariables":{"FIREBASE_CONFIG":"{\"projectId\":\"route-manager-5f65b\",\"storageBucket\":\"route-manager-5f65b.appspot.com\",\"locationId\":\"us-central\"}","GCLOUD_PROJECT":"route-manager-5f65b","EVENTARC_CLOUD_EVENT_SOURCE":"projects/route-manager-5f65b/locations/us-central1/services/listUsers"},"maxInstanceCount":100,"ingressSettings":"ALLOW_ALL","uri":"https://listusers-3kuu5w27qa-uc.a.run.app","serviceAccountEmail":"286820515500-compute@developer.gserviceaccount.com","availableMemory":"256Mi","allTrafficOnLatestRevision":true,"revision":"listusers-00009-yuf","maxInstanceRequestConcurrency":80,"availableCpu":"1"},"state":"ACTIVE","updateTime":"2023-09-08T21:59:53.380091880Z","labels":{"deployment-tool":"cli-firebase","deployment-callable":"true","firebase-functions-hash":"6ea75c78b96e8e1c7169e9ff1544a2dae03f8f0b"},"environment":"GEN_2","url":"https://us-central1-route-manager-5f65b.cloudfunctions.net/listUsers"}]}
[debug] [2023-09-13T15:35:15.183Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) [none]
[debug] [2023-09-13T15:35:15.183Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) [none]
[debug] [2023-09-13T15:35:15.627Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) 200
[debug] [2023-09-13T15:35:15.628Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) {"name":"projects/route-manager-5f65b/databases/(default)","uid":"6c8b782a-47ff-448e-bd2a-b4bfa1e8d5b9","createTime":"2022-09-12T22:02:10.219835Z","updateTime":"2022-09-12T22:02:10.219835Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2023-09-13T14:35:14.952014Z","appEngineIntegrationMode":"ENABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","etag":"IIynsPL0p4EDMJiAgLu5+oAD"}
[debug] [2023-09-13T15:35:15.918Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) 200
[debug] [2023-09-13T15:35:15.918Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default) {"name":"projects/route-manager-5f65b/databases/(default)","uid":"6c8b782a-47ff-448e-bd2a-b4bfa1e8d5b9","createTime":"2022-09-12T22:02:10.219835Z","updateTime":"2022-09-12T22:02:10.219835Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2023-09-13T14:35:15.242830Z","appEngineIntegrationMode":"ENABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","etag":"IPCJwvL0p4EDMJiAgLu5+oAD"}
[info] i  functions: ensuring required API cloudscheduler.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:15.919Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudscheduler.googleapis.com [none]
[debug] [2023-09-13T15:35:15.919Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudscheduler.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:16.429Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudscheduler.googleapis.com 200
[debug] [2023-09-13T15:35:16.429Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/cloudscheduler.googleapis.com [omitted]
[info] +  functions: required API cloudscheduler.googleapis.com is enabled 
[info] i  functions: ensuring required API run.googleapis.com is enabled... 
[info] i  functions: ensuring required API eventarc.googleapis.com is enabled... 
[info] i  functions: ensuring required API pubsub.googleapis.com is enabled... 
[info] i  functions: ensuring required API storage.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:16.430Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/run.googleapis.com [none]
[debug] [2023-09-13T15:35:16.430Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/run.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:16.431Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/eventarc.googleapis.com [none]
[debug] [2023-09-13T15:35:16.431Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/eventarc.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:16.432Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/pubsub.googleapis.com [none]
[debug] [2023-09-13T15:35:16.432Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/pubsub.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:16.433Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/storage.googleapis.com [none]
[debug] [2023-09-13T15:35:16.433Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/storage.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:16.727Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/eventarc.googleapis.com 200
[debug] [2023-09-13T15:35:16.727Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/eventarc.googleapis.com [omitted]
[info] +  functions: required API eventarc.googleapis.com is enabled 
[debug] [2023-09-13T15:35:16.968Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/storage.googleapis.com 200
[debug] [2023-09-13T15:35:16.968Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/storage.googleapis.com [omitted]
[info] +  functions: required API storage.googleapis.com is enabled 
[debug] [2023-09-13T15:35:16.977Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/pubsub.googleapis.com 200
[debug] [2023-09-13T15:35:16.977Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/pubsub.googleapis.com [omitted]
[info] +  functions: required API pubsub.googleapis.com is enabled 
[debug] [2023-09-13T15:35:16.996Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/run.googleapis.com 200
[debug] [2023-09-13T15:35:16.996Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/run.googleapis.com [omitted]
[info] +  functions: required API run.googleapis.com is enabled 
[info] i  functions: generating the service identity for pubsub.googleapis.com... 
[info] i  functions: generating the service identity for eventarc.googleapis.com... 
[debug] [2023-09-13T15:35:16.997Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/pubsub.googleapis.com:generateServiceIdentity [none]
[debug] [2023-09-13T15:35:16.998Z] >>> [apiv2][query] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/eventarc.googleapis.com:generateServiceIdentity [none]
[debug] [2023-09-13T15:35:17.628Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/eventarc.googleapis.com:generateServiceIdentity 200
[debug] [2023-09-13T15:35:17.628Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/eventarc.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-286820515500@gcp-sa-eventarc.iam.gserviceaccount.com","uniqueId":"103313329740766936914"}}
[debug] [2023-09-13T15:35:17.716Z] <<< [apiv2][status] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/pubsub.googleapis.com:generateServiceIdentity 200
[debug] [2023-09-13T15:35:17.716Z] <<< [apiv2][body] POST https://serviceusage.googleapis.com/v1beta1/projects/286820515500/services/pubsub.googleapis.com:generateServiceIdentity {"name":"operations/finished.DONE_OPERATION","done":true,"response":{"@type":"type.googleapis.com/google.api.serviceusage.v1beta1.ServiceIdentity","email":"service-286820515500@gcp-sa-pubsub.iam.gserviceaccount.com","uniqueId":"117717794034527465381"}}
[debug] [2023-09-13T15:35:17.718Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:17.939Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:17.939Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[debug] [2023-09-13T15:35:17.941Z] >>> [apiv2][query] POST https://firebasehosting.googleapis.com/v1beta1/projects/-/sites/route-manager-5f65b/versions [none]
[debug] [2023-09-13T15:35:17.941Z] >>> [apiv2][body] POST https://firebasehosting.googleapis.com/v1beta1/projects/-/sites/route-manager-5f65b/versions {"status":"CREATED","labels":{"deployment-tool":"cli-firebase"}}
[debug] [2023-09-13T15:35:18.694Z] <<< [apiv2][status] POST https://firebasehosting.googleapis.com/v1beta1/projects/-/sites/route-manager-5f65b/versions 200
[debug] [2023-09-13T15:35:18.694Z] <<< [apiv2][body] POST https://firebasehosting.googleapis.com/v1beta1/projects/-/sites/route-manager-5f65b/versions {"name":"projects/286820515500/sites/route-manager-5f65b/versions/02ef265c3284647a","status":"CREATED","config":{},"labels":{"deployment-tool":"cli-firebase"}}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:18.694Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/firebaseextensions.googleapis.com [none]
[debug] [2023-09-13T15:35:18.694Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:19.197Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/firebaseextensions.googleapis.com 200
[debug] [2023-09-13T15:35:19.197Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/firebaseextensions.googleapis.com [omitted]
[info] +  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2023-09-13T15:35:19.198Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-09-13T15:35:19.198Z] > authorizing via signed-in user (routeworksllc@gmail.com)
[debug] [2023-09-13T15:35:19.198Z] [iam] checking project route-manager-5f65b for permissions ["firebase.projects.get","firebaseextensions.instances.list"]
[debug] [2023-09-13T15:35:19.198Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions [none]
[debug] [2023-09-13T15:35:19.198Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:19.198Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2023-09-13T15:35:19.348Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions 200
[debug] [2023-09-13T15:35:19.348Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.list"]}
[debug] [2023-09-13T15:35:19.349Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/route-manager-5f65b/instances pageSize=100&pageToken=
[debug] [2023-09-13T15:35:19.879Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/route-manager-5f65b/instances 200
[debug] [2023-09-13T15:35:19.879Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/route-manager-5f65b/instances {"instances":[{"name":"projects/route-manager-5f65b/instances/firestore-stripe-payments","createTime":"2022-11-21T22:09:22.457841Z","updateTime":"2023-09-07T06:32:59.229357Z","state":"ACTIVE","config":{"name":"projects/route-manager-5f65b/instances/firestore-stripe-payments/configurations/1cb2f896-5e07-45b7-8c9d-eca3b6baae92","createTime":"2023-09-07T06:29:12.640853Z","source":{"name":"projects/stripe-subs-ext/sources/31f1c5ef-311b-43b1-992b-8934e6c10623","packageUri":"https://storage.googleapis.com/firebase-ext-eap-uploads/firebase-archive--37676-Xtj8MYao4YEu-.zip?alt=media","hash":"0b93e995c99a88c06e2e62795f3bdee2dce1e49f9f019658eb604437613fb446","extensionRoot":"/","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.3","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}]},"fetchTime":"2023-03-20T10:54:19.923313Z","lastOperationName":"projects/stripe-subs-ext/operations/5e1ef1e0-c9ac-4e45-b6bb-0e6b802a3cb1","state":"ACTIVE"},"params":{"STRIPE_CONFIG_COLLECTION":"configuration","STRIPE_API_KEY":"projects/286820515500/secrets/firestore-stripe-payments-STRIPE_API_KEY/versions/3","LOCATION":"us-central1","STRIPE_WEBHOOK_SECRET":"projects/286820515500/secrets/firestore-stripe-payments-STRIPE_WEBHOOK_SECRET/versions/3","DELETE_STRIPE_CUSTOMERS":"Do not delete","PRODUCTS_COLLECTION":"products","SYNC_USERS_ON_CREATE":"Do not sync","CREATE_CHECKOUT_SESSION_MIN_INSTANCES":"0","CUSTOMERS_COLLECTION":"customers"},"populatedPostinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/route-manager-5f65b/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /customers/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /products/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `https://us-central1-route-manager-5f65b.cloudfunctions.net/ext-firestore-stripe-payments-handleWebhookEvents`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/route-manager-5f65b/extensions/instances/firestore-stripe-payments?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('products')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `customers/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('customers')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('customers')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('us-central1')\n  .httpsCallable('ext-firestore-stripe-payments-createPortalLink');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","extensionRef":"stripe/firestore-stripe-payments","extensionVersion":"0.3.3","allowedEventTypes":["com.stripe.v1.product.created","com.stripe.v1.product.updated","com.stripe.v1.product.deleted","com.stripe.v1.price.created","com.stripe.v1.price.updated","com.stripe.v1.price.deleted","com.stripe.v1.checkout.session.completed","com.stripe.v1.checkout.session.async_payment_succeeded","com.stripe.v1.checkout.session.async_payment_failed","com.stripe.v1.customer.subscription.created","com.stripe.v1.customer.subscription.updated","com.stripe.v1.customer.subscription.deleted","com.stripe.v1.tax_rate.created","com.stripe.v1.tax_rate.updated","com.stripe.v1.invoice.paid","com.stripe.v1.invoice.payment_succeeded","com.stripe.v1.invoice.payment_failed","com.stripe.v1.invoice.upcoming","com.stripe.v1.invoice.marked_uncollectible","com.stripe.v1.invoice.payment_action_required","com.stripe.v1.payment_intent.processing","com.stripe.v1.payment_intent.succeeded","com.stripe.v1.payment_intent.canceled","com.stripe.v1.payment_intent.payment_failed"],"eventarcChannel":"projects/route-manager-5f65b/locations/us-central1/channels/firebase","systemParams":{"firebaseextensions.v1beta.function/minInstances":"0","firebaseextensions.v1beta.function/memory":"256","firebaseextensions.v1beta.function/vpcConnectorEgressSettings":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED"}},"lastOperationName":"projects/route-manager-5f65b/operations/fa12f402-28e8-4f53-8126-d32e393b74ae","serviceAccountEmail":"ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","lastOperationType":"CONFIGURE","etag":"3490e1427a177ded4fd67db63e17493f6ea5e1e349b6d9d22d8301a83d0c9f68"}]}
[debug] [2023-09-13T15:35:19.881Z] Successfully read params from firestore-stripe-payments.env
[debug] [2023-09-13T15:35:19.881Z] Error: ENOENT: no such file or directory, open 'C:\Users\justi\Code\route-manager-firebase\extensions\firestore-stripe-payments.env.prod'
[debug] [2023-09-13T15:35:19.881Z] Error: ENOENT: no such file or directory, open 'C:\Users\justi\Code\route-manager-firebase\extensions\firestore-stripe-payments.env.286820515500'
[debug] [2023-09-13T15:35:19.881Z] Error: ENOENT: no such file or directory, open 'C:\Users\justi\Code\route-manager-firebase\extensions\firestore-stripe-payments.env.route-manager-5f65b'
[debug] [2023-09-13T15:35:19.881Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig [none]
[debug] [2023-09-13T15:35:20.132Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig 200
[debug] [2023-09-13T15:35:20.132Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b/adminSdkConfig {"projectId":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"}
[debug] [2023-09-13T15:35:20.132Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:20.367Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:20.368Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[debug] [2023-09-13T15:35:20.368Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions filter=&showPrereleases=true&pageSize=100&pageToken=
[debug] [2023-09-13T15:35:21.225Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions 200
[debug] [2023-09-13T15:35:21.228Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions {"extensionVersions":[{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.0","ref":"stripe/firestore-stripe-payments@0.1.0","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.0","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs8\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs8\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs8\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs8\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://accounts.google.com/AccountChooser?service=gerritcodereview&continue=https://dev-partners.googlesource.com/samples/firebase/extensions-alpha/%2B/refs/heads/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://accounts.google.com/AccountChooser?service=gerritcodereview&continue=https://dev-partners.googlesource.com/samples/firebase/extensions-alpha/%2B/refs/heads/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products"},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"**IMPORTANT: This extension is part of the Firebase Alpha program. [Alpha extensions](https://accounts.google.com/AccountChooser?service=gerritcodereview&continue=https://dev-partners.googlesource.com/login/samples/firebase/extensions-alpha/) are confidential, and their functionality might change in backward-incompatible ways before official, public release. We do not recommend installing Alpha extensions in production apps.**\n\nUse this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Pricing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Firebase Authentication\n- Cloud Firestore\n- Cloud Functions\n\nWhen you use Firebase Extensions, you're only charged for the underlying resources that you use. A paid-tier billing plan is only required if the extension uses a service that requires a paid-tier plan, for example calling to a Google Cloud Platform API or making outbound network requests to non-Google services. All Firebase services offer a free tier of usage. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nUsage of this extension also requires you to have a Stripe account. You are responsible for any associated costs with your usage of Stripe and the [Stripe Billing product](https://stripe.com/pricing#billing-pricing).\n","postinstallContent":"### Configuring the extension\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/_/database/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read, write: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. For Stripe to be able to reach the webhook handler function, make the extension's `handleWebhookEvents` function public by following [these steps](https://cloud.google.com/functions/docs/securing/managing-access-iam#allowing_unauthenticated_function_invocation) in the Google Cloud console. Here's the official name of the function displayed in the console:\n   `${function:handleWebhookEvents.name}`.\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://firebase.google.com/docs/extensions/manage-installed-extensions#reconfigure) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please email stripe-extension-feedback@googlegroups.com with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product:\n\n![Stripe Product Dashboard](http://gstatic.com/mobilesdk/200624_mobilesdk/stripe-advanced-options.png)\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/thorsten-stripe/firestore-stripe-subscriptions-extension-demo);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: formData.get('price'),\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', '==', 'active')\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active Subscription to exist\n    const doc = snapshot.docs[0].data();\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\nIn order for your client application to be able to reach the function follow [these steps](https://cloud.google.com/functions/docs/securing/managing-access-iam#allowing_unauthenticated_function_invocation) in the Google Cloud console to make it public. Here's the official name of the function displayed in the console: `${function:createPortalLink.name}`.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please send any feedback to stripe-extension-feedback@googlegroups.com!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: **IMPORTANT: This extension is part of the Firebase Alpha program. [Alpha extensions](https://accounts.google.com/AccountChooser?service=gerritcodereview&continue=https://dev-partners.googlesource.com/login/samples/firebase/extensions-alpha/) are confidential, and their functionality might change in backward-incompatible ways before official, public release. We do not recommend installing Alpha extensions in production apps.**\n\nUse this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Pricing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Firebase Authentication\n- Cloud Firestore\n- Cloud Functions\n\nWhen you use Firebase Extensions, you're only charged for the underlying resources that you use. A paid-tier billing plan is only required if the extension uses a service that requires a paid-tier plan, for example calling to a Google Cloud Platform API or making outbound network requests to non-Google services. All Firebase services offer a free tier of usage. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nUsage of this extension also requires you to have a Stripe account. You are responsible for any associated costs with your usage of Stripe and the [Stripe Billing product](https://stripe.com/pricing#billing-pricing).\n\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.0","releaseNotes":"Initial release of the `firestore-stripe-subscriptions` extension.\n","listing":{"state":"APPROVED"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.1","ref":"stripe/firestore-stripe-payments@0.1.1","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.1","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products"},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/_/database/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read, write: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: formData.get('price'),\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', '==', 'active')\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active Subscription to exist\n    const doc = snapshot.docs[0].data();\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.1","releaseNotes":"Version bump in preparation for public beta launch.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"20"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.10","ref":"stripe/firestore-stripe-payments@0.1.10","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.10","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.10","releaseNotes":"[feat] Set [promotion codes](https://stripe.com/docs/billing/subscriptions/discounts/codes) programmatically. **_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore. (#107)\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n[feat] Add `locale` override for `checkout_sessions`: (#131)\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    locale: \"de\",\n  });\n```\n\n[feat] Sync invoices with Cloud Firestore. You can now sync the full Stripe invoice objects to an `invoices` subcollection on their corresponding subscription doc by listening to the relevant invoices webhook events (`invoice.paid`, `invoice.payment_succeeded`, `invoice.payment_failed`, `invoice.upcoming`, `invoice.marked_uncollectible`, `invoice.payment_action_required`). Only select the\nevents that you want to be notified about. You can then [listen to changes](https://firebase.google.com/docs/functions/firestore-events#writing-triggered_functions) on the invoices objects in Cloud Firestore: (#124)\n\n```js\nconst functions = require(\"firebase-functions\");\n\nexports.myFunction = functions.firestore\n  .document(\"customers/{uid}/subscriptions/{subsId}/invoices/{docId}\")\n  .onWrite((change, context) => {\n    /* ... */\n  });\n```\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"200"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.11","ref":"stripe/firestore-stripe-payments@0.1.11","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.11","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.11","releaseNotes":"[fix] Fix an issue where metered billing subscriptions were not synced to Cloud Firestore. (#138)\n\n[feat] Sync subscription items to Cloud Firestore. (#140)\n\n[feat] Allow setting of [`client_reference_id`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-client_reference_id) on the checkout session doc. (#143)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"400"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.12","ref":"stripe/firestore-stripe-payments@0.1.12","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.12","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Collecting one-time payments without a subscription\n\nYou can also create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"d28ad9d048fab78640697737007c2aadef6890ff57b5289560d26db71156ab6b","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.12","releaseNotes":"[feat] Sync customer email address to Cloud Firestore. (#157)\n\n[feat] Add support for one-time payment mode. (#39; #133; #151; #164)\n\nYou can now create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n[feat] Add support for shipping address collection. (#26)\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n[Fix] Merge product and price data instead of overwriting. This allows you to add additional data to your product and price docs in Cloud Firestore. Note: this means when you remove metadata keys from your products in Stripe, they won't be removed in Cloud Firestore. (#169; #152)\n\n[Fix] Stripe customer object deletion is now a configuration option which defaults to not deleting customer objects in Stripe. (#160)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"300"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.13","ref":"stripe/firestore-stripe-payments@0.1.13","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.13","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Collecting one-time payments without a subscription\n\nYou can also create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"c51d9f3ac825f47eca213aaccb357ef3d19a9190a7dd3994d23485324ccb56a0","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.13","releaseNotes":"[fix] Add a `prices` and an `items` array to the one-time payment docs in the `payments` collection. The `prices` array holds Firestore references for the prices that make up this payment, and the `items` array includes the full line items of the Stripe Checkout session.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.14","ref":"stripe/firestore-stripe-payments@0.1.14","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.14","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Collecting one-time payments without a subscription\n\nYou can also create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"488d28c94b3024875e5b4022c2d21532343b686f11eef2f9052bad49963cceaa","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.14","releaseNotes":"[feat] Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n[feat] Redirect to Stripe Checkout via URL instead of Stripe.js (#212)\n\nStripe Checkout now returns a URL which means Stripe.js is no longer needed to redirect to checkout:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n[fix] Add checkout session metadata to one time payments (#203)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"300"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.15","ref":"stripe/firestore-stripe-payments@0.1.15","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.15","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it. \n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Collecting one-time payments without a subscription\n\nYou can also create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"0c41926388b50d4e4bb120e369f773d29f6a8c354bebef4fe59f2c3f02007514","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.15","releaseNotes":"[feat] Programmatically set locale for customer portal session. (#131)\n\n[feat] Optionally set ID for a customer portal [configuration](https://stripe.com/docs/api/customer_portal/configuration) (#234)\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions(functionLocation)\n  .httpsCallable(\"ext-firestore-stripe-subscriptions-createPortalLink\");\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n[feat] Support setting of [`customer_update` object](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-customer_update) on checkout session doc creation (#219)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"500"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.2","ref":"stripe/firestore-stripe-payments@0.1.2","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.2","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products"},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/_/database/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read, write: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: formData.get('price'),\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', '==', 'active')\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active Subscription to exist\n    const doc = snapshot.docs[0].data();\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.2","releaseNotes":"[feat] - Adds the `onUserDeleted` function which is triggered by a user being deleted in Firebase Authentication. Upon user deletion the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n[feat] - Adds the `onCustomerDataDeleted` function which has the same effect as `onUserDeleted` but is triggered when the customer doc in the Cloud Firestore is deleted. This ensures compatibility with the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n[fix] - Allow creation of a Stripe customer object without email address.\n[fix] - Create Stripe customer object just in time to support users that existed before the extension was installed.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"20"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.3","ref":"stripe/firestore-stripe-payments@0.1.3","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.3","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products"},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/_/database/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read, write: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n      metadata: {\n        item: 'item001',\n      },\n    });\n```\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.3","releaseNotes":"[fix] - Apply trial days from pricing plan to the checkout session.\n\n[feat] - Support setting metadata on the subscription:\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: \"item001\",\n    },\n  });\n```\n\n[feat] - Sync additional data from the Stripe subscription object to Cloud Firestore:\n\n```ts\n/**\n * Start of the current period that the subscription has been invoiced for.\n */\ncurrent_period_start: FirebaseFirestore.Timestamp;\n/**\n * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n */\ncurrent_period_end: FirebaseFirestore.Timestamp;\n/**\n * A date in the future at which the subscription will automatically get canceled.\n */\ncancel_at: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.\n */\ncanceled_at: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has a trial, the beginning of that trial.\n */\ntrial_start: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has a trial, the end of that trial.\n */\ntrial_end: FirebaseFirestore.Timestamp | null;\n/**\n * Set of key-value pairs that you can attach to an object.\n * This can be useful for storing additional information about the object in a structured format.\n */\nmetadata: {\n  [name: string]: string;\n};\n```\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"20"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.4","ref":"stripe/firestore-stripe-payments@0.1.4","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.4","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/_/database/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read, write: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.4","releaseNotes":"[fix] - Make sure to merge existing custom claims before setting the `stripeRole` custom claim. Previously the extensions would overwrite the user's existing custom claims.\n\n[fix] - Corretly handle one-time (non-recurring) prices. This update adds a `type` parameter to the price document in Cloud Firestore:\n\n```ts\n/**\n * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n */\ntype: \"one_time\" | \"recurring\";\n```\n\n[feat] - Sync the price description to Cloud Firestore.\n\n[feat] - Add support for discounts, coupons, promotion codes:\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nTo show the promotion code redemption box on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n[feat] - Support setting tax rates when starting the subscription:\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"50"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.5","ref":"stripe/firestore-stripe-payments@0.1.5","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.5","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { sessionId } = snap.data();\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.5","releaseNotes":"[change] - Only log the `stripeRole` custom claim, not the whole claim object.\n\n[fix] - Fix security rules example in `POSTINSTALL.md`. (#47)\n\n[fix] - Supply email address to Stripe customer creation also for existing Firebase users. (#42)\n\n[feat] - Add support for multiple prices, including one-time setup fees: (#27; #33)\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\", // RECURRING_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n      {\n        price: \"price_1HEtgDHYgolSBA35LMkO3ExX\", // ONE_TIME_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n[feat] - Add support for dynamic tax rates: (#115)\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"60"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.6","ref":"stripe/firestore-stripe-payments@0.1.6","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.6","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details?\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.6","releaseNotes":"[fix] - If there is an error during checkout session creation attach the error message to the Cloud Firestore doc so the client can know that an error happened (#57)\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension.\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout.\n    const stripe = Stripe(\"pk_test_1234\");\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n[feat] - Add the ability to disable the trial to be applied to a subscription by setting `trial_from_plan: false`. (#52)\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.7","ref":"stripe/firestore-stripe-payments@0.1.7","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.7","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to YES, the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to NO (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `price.created`\n   - `price.updated`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. The extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to YES, the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to NO (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.7","releaseNotes":"[change] - Additional configuration and **change of default behaviour**: you can now disable the automatic sync of new users to Stripe customers and Cloud Firestore, and the default behaviour has been changed to \"on the fly\" creation of customer objects. (#66; #51; #76)\n\n[feat] - Add support for subscriptions not created via Checkout, e.g. via the Stripe Dashboard or directly via the API. (#43)\n\nPreviously, only subscriptions created via Stripe Checkout were synced to Cloud Firestore. By additionally listening to the `customer.subscription.created` event, the extension now also captures subscriptions created via the Stripe Dashboard or directly via the API. For this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n[docs] - Add snippet on importing Stripe.js as an ES module when using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.) to `POSTINSTALL.md`. (#74)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.8","ref":"stripe/firestore-stripe-payments@0.1.8","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.8","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 20 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" resource.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" resource.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.8","releaseNotes":"[feat] - Sync tax rates from your Stripe account to Cloud Firestore. Tax Rates are added to a `tax_rates` sub-collection on a `tax_rates` doc in your products collection:\n\n```js\nconst taxRates = await db\n  .collection(\"products\")\n  .doc(\"tax_rates\")\n  .collection(\"tax_rates\")\n  .get();\n```\n\n[feat] - Sync product and price metadata from Stripe to Cloud Firestore. To allow for [ordering and limiting](https://firebase.google.com/docs/firestore/query-data/order-limit-data) when querying product data, the metadata has been flattened to the Cloud Firestore docs with the `stripe_metadata_` prefix. E.g. adding `index:0` to your product metadata in Stripe will be available as `stripe_metadata_index` on your product doc in Cloud Firestore. This allows you to for example order products based on this index:\n\n```js\ndb.collection(\"products\")\n  .where(\"active\", \"==\", true)\n  .orderBy(\"stripe_metadata_index\")\n  .get()\n  .then(function (querySnapshot) {\n    // [...]\n  });\n```\n\n[feat] - The extension now defaults to collecting the customer's billing address during checkout and sets it as the address on the Stripe customer object. If you don't want to collect it, you can pass `billing_address_collection: auto` to the checkout session doc creation.\n\n[change] - The extension now adds a product doc reference to the subscription doc in addition to the price doc reference for easier access of the product data for a given subscription.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.1.9","ref":"stripe/firestore-stripe-payments@0.1.9","spec":{"specVersion":"v1beta","name":"firestore-stripe-subscriptions","version":"0.1.9","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-subscriptions","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"STRING","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"STRING","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n      \n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add subscription payments and access control to your websites fully client-side with the [Firebase JavaScript SDK](https://firebase.google.com/docs/web/setup). You can experience a demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\nTo redirect to Stripe Checkout from your web client, you will need to load Stripe.js. See the [Stripe docs](https://stripe.com/docs/payments/checkout/set-up-a-subscription#redirect-checkout) for more information.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = Stripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Importing Stripe.js as ES module\n\nIf you're using a build toolchain for your client application (e.g. Angular, React, TypeScript, etc.), it is recommended to import and load Stripe.js via the [`stripe-js` module](https://github.com/stripe/stripe-js#stripejs-es-module):\n\n```js\nimport {loadStripe} from '@stripe/stripe-js';\n// [...]\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot(async (snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and \n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout\n    // Init Stripe\n    const stripe = await loadStripe('pk_test_1234');\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_session` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates to the subscription\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: One-time prices are only supported in combination with recurring prices! If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price). \n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({ returnUrl: window.location.origin });\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nWhen a user is deleted in Firebase Authentication the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user. \n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Subscription Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension to create subscriptions for your users with the [Stripe](https://www.stripe.com/) payments platform and manage access control via Firebase Authentication.\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nThis extension is meant for the web platform. If you're developing native mobile applications and want to sell digital products or services **within** your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Billing ([pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Subscription Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","createTime":"2021-11-09T02:03:23.553020Z","id":"0.1.9","releaseNotes":"[feat] - Support all billing pricing models.\n\n_*IMPORTANT*_: For tiered pricing plans to be synced correctly, you need to update the permissions of your restricted key to include read permissions for subscription plans!\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"200"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.0","ref":"stripe/firestore-stripe-payments@0.2.0","spec":{},"state":"PUBLISHED","createTime":"2021-11-09T19:43:51.277148Z","id":"0.2.0","listing":{"state":"APPROVED"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.1","ref":"stripe/firestore-stripe-payments@0.2.1","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.1","description":"Controls access to paid content by syncing your subscriptions with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","required":true,"default":"FILL_IN_FROM_POSTINSTALL","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Web & Mobile Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"35859db56672efb4077331a0c72f56a631a43f32edb336fef9b1d09d152c7a5a","createTime":"2021-11-09T21:44:11.892787Z","id":"0.2.1","releaseNotes":"[RENAME] The extension has been renamed from `firestore-stripe-subscriptions` to `firestore-stripe-payments` to better reflect the support for both one time, and recurring payments.\n\n[feat] Add support for setting [`shipping_rates`](https://stripe.com/docs/payments/checkout/shipping) in the `checkout_sessions` doc. (#241)\n\n[feat] Add support for mobile clients for both payment and setup mode:\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n","listing":{"state":"APPROVED"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.2","ref":"stripe/firestore-stripe-payments@0.2.2","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.2","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"0b21f1ca422764e6e66b26b97720b46bb832d22f450e1f7f5128c73cc06b05d5","createTime":"2021-11-10T00:12:01.349124Z","id":"0.2.2","releaseNotes":"[RENAME] The extension has been renamed from `firestore-stripe-subscriptions` to `firestore-stripe-payments` to better reflect the support for both one time, and recurring payments.\n\n[feat] Add support for setting [`shipping_rates`](https://stripe.com/docs/payments/checkout/shipping) in the `checkout_sessions` doc. (#241)\n\n[feat] Add support for mobile clients for both payment and setup mode:\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.3","ref":"stripe/firestore-stripe-payments@0.2.3","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.3","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"f9b443e1dc08f8fcac975ce348470ae87f65f4ad70792da985047a50d5b1ec79","createTime":"2021-11-29T17:54:52.983315Z","id":"0.2.3","releaseNotes":"[feat] Manage payment methods in the Dashboard: setting `payment_method_types` is now optional. By default, all payment methods enabled in your Stripe Dashboard will be presented on the Stripe Checkout page.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.4","ref":"stripe/firestore-stripe-payments@0.2.4","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.4","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('customers')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"f00fa7d26fdae2b03a0f398a68b991bc3db37012f4ded36a951ae218a193cbc9","createTime":"2021-12-22T20:03:48.839474Z","id":"0.2.4","releaseNotes":"[feat] Add support to bring phone numbers saved on Firebase users into Stripe when creating a checkout session for a subscription. (#251)\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"800"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.5","ref":"stripe/firestore-stripe-payments@0.2.5","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.5","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs10\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"da5e451488faa95dbb0018fcd822c140c14ed4fddb09492b8f02d2cb0c7f05f6","createTime":"2022-04-20T16:32:01.894646Z","id":"0.2.5","releaseNotes":"[feat] Add parameter to enable phone number collection. \n\n[feat] Add parameters to enable expired Checkout Session recovery. \n\n[feat] Add `setup_future_usage` parameter for one-time payment flows.\n\n[feat] Use dynamic parameter reference in README.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"100"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.6","ref":"stripe/firestore-stripe-payments@0.2.6","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.6","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"ba1c7f496a5bd1bc6c4f22fa0de19ffeeabbc95d1e622e463bad949848cf2d69","createTime":"2022-05-10T17:38:09.958075Z","id":"0.2.6","releaseNotes":"[feat] Added Stripe extension events. This extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event. (#386)\n","listing":{"state":"APPROVED"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.2.7","ref":"stripe/firestore-stripe-payments@0.2.7","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.2.7","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"8a4e337e75d2509fe05e62463f3879ce9f7fd866d535019edfe92ca585b9e49a","createTime":"2022-05-10T18:44:38.649694Z","id":"0.2.7","releaseNotes":"[chore] Updated package-lock.json that was causing install errors.\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"900"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.0","ref":"stripe/firestore-stripe-payments@0.3.0","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.0","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"SECRET","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"bb7ad88bf711c9173aede78b14bb28dc293bef7cb903c18b1fce8f4ec2322be5","createTime":"2022-08-23T15:04:51.713254Z","id":"0.3.0","releaseNotes":"[feat] Allow configurable minimum instances for `createCheckoutSession` function. [#375]\n\n[feat] Throw an `unauthenticated` Firebase error from `creatPortalLink` function. [#420]\n\n[feat] Add Price object IDs from invoice line items for subscription payments to payments Firestore collection. [#393]\n","listing":{"state":"APPROVED"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.1","ref":"stripe/firestore-stripe-payments@0.3.1","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.1","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"52cdc018295f358d97a302dd2802e3189f0679e44e6740199155104364611267","createTime":"2022-08-24T14:14:37.173255Z","id":"0.3.1","releaseNotes":"[chore] Added `package-lock.json` to version control to prevent installation issues. [#426]\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"1300"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.2","ref":"stripe/firestore-stripe-payments@0.3.2","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.2","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/web-sdk/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Plans\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"f87b79893d2e35a4926b9f9d81482da6d04d99ef652b681a86391adec753589e","createTime":"2022-11-30T16:49:47.601578Z","id":"0.3.2","releaseNotes":"[chore] Added support for `us-west1` as a deployable region for Firebase functions. [#464]\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"1800"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.3","ref":"stripe/firestore-stripe-payments@0.3.3","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.3","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"0b93e995c99a88c06e2e62795f3bdee2dce1e49f9f019658eb604437613fb446","createTime":"2023-03-20T10:54:19.923313Z","id":"0.3.3","releaseNotes":"[fix] Address issue where `insertInvoiceRecord` function fails. [#511]\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"2900"}},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.4","ref":"stripe/firestore-stripe-payments@0.3.4","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.4","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Stripe configuration collection: What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.\n\n* Minimum instances for createCheckoutSession function: Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"d8ab13445f1cf92b77a4067820bf0fd9b57bc1d1eaa30fa1eb080add3680c5b6","createTime":"2023-08-14T09:58:54.399327Z","id":"0.3.4","releaseNotes":"This extension has been formally transferred to Invertase. See the updated README for more details.\n","buildSourceUri":"https://github.com/stripe/stripe-firebase-extensions/tree/107031923116d776ace0d33011a28d29e48fe827","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"700"},"extensionRoot":"firestore-stripe-payments"},{"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.4-rc.0","ref":"stripe/firestore-stripe-payments@0.3.4-rc.0","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.4-rc.0","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Run Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Stripe configuration collection: What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.\n\n* Minimum instances for createCheckoutSession function: Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"1e632fc91002ce2458ed0f6f20b160499ce5e5f5ec4cb6209f7d5c36edec4971","createTime":"2023-08-14T09:27:01.584675Z","id":"0.3.4-rc.0","listing":{"state":"UNLISTED"}}]}
[debug] [2023-09-13T15:35:21.236Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.3 [none]
[debug] [2023-09-13T15:35:21.520Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.3 200
[debug] [2023-09-13T15:35:21.520Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.3 {"name":"publishers/stripe/extensions/firestore-stripe-payments/versions/0.3.3","ref":"stripe/firestore-stripe-payments@0.3.3","spec":{"specVersion":"v1beta","name":"firestore-stripe-payments","version":"0.3.3","description":"Controls access to paid content by syncing your one-time and recurring payments with Firebase Authentication.","roles":[{"role":"firebaseauth.admin","reason":"Allows the extension to set custom claims for users."},{"role":"datastore.user","reason":"Allows the extension to store customers & subscriptions in Cloud Firestore."}],"resources":[{"name":"createCustomer","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.create\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Stripe customer object when a new user signs up.","deletionPolicy":"DELETE"},{"name":"createCheckoutSession","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.create\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}/checkout_sessions/{id}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates a Checkout session to collect the customer's payment details.","deletionPolicy":"DELETE"},{"name":"createPortalLink","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Creates links to the customer portal for the user to manage their payment & subscription details.","deletionPolicy":"DELETE"},{"name":"handleWebhookEvents","type":"firebaseextensions.v1beta.function","propertiesYaml":"httpsTrigger: {}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.","deletionPolicy":"DELETE"},{"name":"onUserDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/firebase.auth/eventTypes/user.delete\n  resource: projects/${PROJECT_ID}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.","deletionPolicy":"DELETE"},{"name":"onCustomerDataDeleted","type":"firebaseextensions.v1beta.function","propertiesYaml":"eventTrigger:\n  eventType: providers/cloud.firestore/eventTypes/document.delete\n  resource: projects/${PROJECT_ID}/databases/(default)/documents/${CUSTOMERS_COLLECTION}/{uid}\nlocation: ${LOCATION}\nruntime: nodejs14\n","description":"Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Stripe","url":"https://stripe.com"},"contributors":[{"authorName":"Thorsten Schaeff","url":"https://twitter.com/thorwebdev"},{"authorName":"Firebase","url":"https://firebase.google.com"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments/CHANGELOG.md","sourceUrl":"https://github.com/stripe/stripe-firebase-extensions/tree/master/firestore-stripe-payments","params":[{"param":"LOCATION","label":"Cloud Functions deployment location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west1","label":"Oregon (us-west1)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true},{"param":"PRODUCTS_COLLECTION","label":"Products and pricing plans collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?","required":true,"default":"products","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"CUSTOMERS_COLLECTION","label":"Customer details and subscriptions collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.","required":true,"default":"customers","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"STRIPE_CONFIG_COLLECTION","label":"Stripe configuration collection","type":"STRING","description":"What is the path to the Cloud Firestore collection where the extension should store Stripe configuration?","default":"configuration","validationRegex":"^[^/]+(/[^/]+/[^/]+)*$","validationErrorMessage":"Firestore collection paths must be an odd number of segments separated by slashes, e.g. \"path/to/collection\"."},{"param":"SYNC_USERS_ON_CREATE","label":"Sync new users to Stripe customers and Cloud Firestore","type":"SELECT","description":"Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.","required":true,"options":[{"value":"Do not sync","label":"Do not sync"},{"value":"Sync","label":"Sync"}],"default":"Do not sync"},{"param":"DELETE_STRIPE_CUSTOMERS","label":"Automatically delete Stripe customer objects","type":"SELECT","description":"Do you want to automatically delete customer objects in Stripe? When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete' the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.","required":true,"options":[{"value":"Do not delete","label":"Do not delete"},{"value":"Auto delete","label":"Auto delete"}],"default":"Do not delete"},{"param":"STRIPE_API_KEY","label":"Stripe API key with restricted access","type":"SECRET","description":"What is your Stripe API key? We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.","required":true,"example":"rk_live_1234567890"},{"param":"STRIPE_WEBHOOK_SECRET","label":"Stripe webhook secret","type":"SECRET","description":"This is your signing secret for a Stripe-registered webhook. This webhook can only be registered after installation. Leave this value untouched during installation, then follow the postinstall instructions for registering your webhook and configuring this value.","example":"whsec_1234567890"},{"param":"CREATE_CHECKOUT_SESSION_MIN_INSTANCES","label":"Minimum instances for createCheckoutSession function","type":"STRING","description":"Set the minimum number of function instances that should be always be available to create Checkout Sessions. This number can be adjusted to reduce cold starts and increase the responsiveness of Checkout Session creation requests. Suggested values are 0 or 1. Please note this setting will likely incur billing costss, see the [Firebase documentation](https://firebase.google.com/docs/functions/manage-functions#reduce_the_number_of_cold_starts) for more information.","required":true,"default":"0"}],"preinstallContent":"Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases. \n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Events\n\nThis extension emits events, which allows you to listen to and run custom logic at different trigger points during the functioning of the extension. For example you can listen to events when a product has been added via the `product.created` event, or whenever a payment has succeeded through the `invoice.payment_succeeded` event.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Cloud Secret Manager\n- Firebase Authentication\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing))\n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.","postinstallContent":"### Client SDK\n\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nUse a package manager like NPM to install the above package, and use it in conjunction with\nthe Firebase Web SDK.\n\n### Configuring the extension\n\nBefore you proceed, make sure you have the following Firebase services set up:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\n#### Set your Cloud Firestore security rules\n\nIt is crucial to limit data access to authenticated users only and for users to only be able to see their own information. For product and pricing information it is important to disable write access for client applications. Use the rules below to restrict access as recommended in your project's [Cloud Firestore rules](https://console.firebase.google.com/project/${param:PROJECT_ID}/firestore/rules):\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n#### Configure Stripe webhooks\n\nYou need to set up a webhook that synchronizes relevant details from Stripe with your Cloud Firestore. This includes product and pricing data from the Stripe Dashboard, as well as customer's subscription details.\n\nHere's how to set up the webhook and configure your extension to use it:\n\n1. Configure your webhook:\n\n   1. Go to the [Stripe dashboard.](https://dashboard.stripe.com/webhooks)\n\n   1. Use the URL of your extension's function as the endpoint URL. Here's your function's URL: `${function:handleWebhookEvents.url}`\n\n   1. Select the following events:\n\n   - `product.created`\n   - `product.updated`\n   - `product.deleted`\n   - `price.created`\n   - `price.updated`\n   - `price.deleted`\n   - `checkout.session.completed`\n   - `customer.subscription.created`\n   - `customer.subscription.updated`\n   - `customer.subscription.deleted`\n   - `payment_intent.processing`\n   - `payment_intent.succeeded`\n   - `payment_intent.canceled`\n   - `payment_intent.payment_failed`\n   - `tax_rate.created` (optional)\n   - `tax_rate.updated` (optional)\n   - `invoice.paid` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_succeeded` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_failed` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.upcoming` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.marked_uncollectible` (optional, will sync invoices to Cloud Firestore)\n   - `invoice.payment_action_required` (optional, will sync invoices to Cloud Firestore)\n\n1. Using the Firebase console or Firebase CLI, [reconfigure](https://console.firebase.google.com/project/${param:PROJECT_ID}/extensions/instances/${param:EXT_INSTANCE_ID}?tab=config) your extension with your webhook’s signing secret (such as, `whsec_12345678`). Enter the value in the parameter called `Stripe webhook secret`.\n\n#### Create product and pricing information (only required when building on the web platform)\n\nFor Stripe to automatically bill your users for recurring payments, you need to create your product and pricing information in the [Stripe Dashboard](https://dashboard.stripe.com/test/products). When you create or update your product and price information in the Stripe Dashboard these details are automatically synced with your Cloud Firestore, as long as the webhook is configured correctly as described above.\n\nThe extension currently supports pricing plans that bill a predefined amount at a specific interval. More complex plans (e.g. different pricing tiers or seats) are not yet supported. If you'd like to see support for these, please open a [feature request issue](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose) with details about your business model and pricing plans.\n\nFor example, this extension works well for business models with different access level tiers, e.g.:\n\n- Product 1: Basic membership\n  - Price 1: 10 USD per month\n  - Price 2: 100 USD per year\n  - Price 3: 8 GBP per month\n  - Price 4: 80 GBP per year\n  - [...]: additional currency and interval combinations\n- Product 2: Premium membership\n  - Price 1: 20 USD per month\n  - Price 2: 200 USD per year\n  - Price 3: 16 GBP per month\n  - Price 4: 160 GBP per year\n  - [...]: additional currency and interval combinations\n\n#### Assign custom claim roles to products (only used for subscriptions)\n\nIf you want users to get assigned a [custom claim role](https://firebase.google.com/docs/auth/admin/custom-claims) to give them access to certain data when subscribed to a specific product, you can set a `firebaseRole` metadata value on the Stripe product ([see screenshot](https://www.gstatic.com/mobilesdk/200710_mobilesdk/ext_stripe_subscription_post_install.png)).\n\nThe value you set for `firebaseRole` (e.g. \"premium\" in the screenshot above) will be set as a custom claim `stripeRole` on the user. This allows you to [set specific security access rules](https://firebase.googleblog.com/2019/03/firebase-security-rules-admin-sdk-tips.html) based on the user's roles, or [limit access to certain pages](https://firebase.google.com/docs/auth/admin/custom-claims#access_custom_claims_on_the_client). For example if you have one `basic` role and one `premium` role you could add the following to your Cloud Firestore rules:\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\nAlternatively you can validate their role client-side with the JavaScript SDK. When doing so you need to make sure to force-refresh the user token:\n\n```js\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n#### Configure the Stripe customer portal (only used for subscriptions)\n\n1. Set your custom branding in the [settings](https://dashboard.stripe.com/settings/branding).\n1. Configure the Customer Portal [settings](https://dashboard.stripe.com/test/settings/billing/portal).\n1. Toggle on \"Allow customers to update their payment methods\".\n1. Toggle on \"Allow customers to update subscriptions\".\n1. Toggle on \"Allow customers to cancel subscriptions\".\n1. Add the products and prices that you want to allow customer to switch between.\n1. Set up the required business information and links.\n\n### Using the extension\n\nOnce you've configured the extension you can add payments and access control to your websites and mobile apps fully client-side with the corresponding Firebase SDKs. You can experience a subscriptions demo application at [https://stripe-subs-ext.web.app](https://stripe-subs-ext.web.app/) and find the demo source code on [GitHub](https://github.com/stripe-samples/firebase-subscription-payments);\n\n#### Sign-up users with Firebase Authentication\n\nThe quickest way to sign-up new users is by using the [FirebaseUI library](https://firebase.google.com/docs/auth/web/firebaseui). Follow the steps outlined in the official docs. When configuring the extension you can choose to 'Sync' new users to Stripe. If set to 'Sync', the extension listens to new users signing up and then automatically creates a Stripe customer object and a customer record in your Cloud Firestore. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n#### List available products and prices\n\nProducts and pricing information are normal collections and docs in your Cloud Firestore and can be queried as such:\n\n```js\ndb.collection('${param:PRODUCTS_COLLECTION}')\n  .where('active', '==', true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, ' => ', doc.data());\n      const priceSnap = await doc.ref.collection('prices').get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, ' => ', doc.data());\n      });\n    });\n  });\n```\n\n### One-time payments on the web\n\nYou can create Checkout Sessions for one-time payments when referencing a one-time price ID. One-time payments will be synced to Cloud Firestore into a payments collection for the relevant customer doc if you update your webhook handler in the Stripe dashboard to include the following events: `payment_intent.succeeded`, `payment_intent.payment_failed`, `payment_intent.canceled`, `payment_intent.processing`.\n\nTo create a Checkout Session ID for a one-time payment, pass `mode: 'payment` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n### Mobile payments (with the mobile payment sheet on iOS and Android)\n\n#### One-time payments\n\nTo create a one time payment in your mobile application, create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'payment'\n- amount: [{payment amount}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount)\n- currency: [{currency code}](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-currency)\n\nThen listen for the extension to append `paymentIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n#### Set up a payment method for future usage\n\nYou can collect a payment method from your customer to charge it at a later point in time. To do so create a new doc in your `${param:CUSTOMERS_COLLECTION}/{uid}/checkout_sessions` collection with the following parameters:\n\n- client: 'mobile'\n- mode: 'setup'\n\nThen listen for the extension to append `setupIntentClientSecret`, `ephemeralKeySecret`, and `customer` to the doc and use these to [integrate the mobile payment sheet](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet#integrate-payment-sheet).\n\n### Subscription payments (web only)\n\n#### Start a subscription with Stripe Checkout\n\nTo subscribe the user to a specific pricing plan, create a new doc in the `checkout_sessions` collection for the user. The extension will update the doc with a Stripe Checkout session ID which you then use to redirect the user to the checkout page.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n#### Handling trials\n\nBy default, the trial period days that you've specified on the pricing plan will be applied to the checkout session. Should you wish to not offer the trial for a certain user (e.g. they've previously had a subscription with a trial that they canceled and are now signing up again), you can specify `trial_from_plan: false` when creating the checkout session doc:\n\n```js\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying discount, coupon, promotion codes\n\nYou can create customer-facing promotion codes in the [Stripe Dashboard](https://dashboard.stripe.com/coupons/create). Refer to the [docs](https://stripe.com/docs/billing/subscriptions/discounts/codes) for a detailed guide on how to set these up.\n\nIn order for the promotion code redemption box to show up on the checkout page, set `allow_promotion_codes: true` when creating the `checkout_sessions` document:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying promotion codes programmatically\n\nYou can set a [promotion code](https://stripe.com/docs/billing/subscriptions/discounts/codes) to be applied to the checkout session without the customer needing to input it.\n\n**_NOTE_**: anyone with access to a promotion code ID would be able to apply it to their checkout session. Therefore make sure to limit your promotion codes and archive any codes you don't want to offer anymore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Automatic tax calculation with [Stripe Tax](https://stripe.com/tax)\n\nStripe Tax lets you calculate and collect sales tax, VAT, and GST. Know where to register, automatically collect the right amount of tax, and access the reports you need to file returns.\n\n1. Request access: https://stripe.com/tax#request-access\n2. Set up Stripe Tax in the Dashboard: https://stripe.com/docs/tax/set-up\n3. Enable automatic tax calculation when creating your `checkout_sessions` docs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying tax rates dynamically\n\nStripe Checkout supports applying the correct tax rate for customers in  US, GB, AU, and all countries in the EU. With [dynamic tax rates](https://stripe.com/docs/billing/subscriptions/taxes#adding-tax-rates-to-checkout), you create tax rates for different regions (e.g., a 20% VAT tax rate for customers in the UK and a 7.25% sales tax rate for customers in California, US) and Stripe attempts to match your customer’s location to one of those tax rates.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\", \"txr_1Hlsk0HYgolSBA35rlraUVWO\", \"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Applying static tax rates\n\nYou can collect and report taxes with [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates). To apply tax rates to the subscription, you first need to create your tax rates in the [Stripe Dashboard](https://dashboard.stripe.com/tax-rates). When creating a new `checkout_sessions` document, specify the optional `tax_rates` list with [up to five](https://stripe.com/docs/billing/taxes/tax-rates#using-multiple-tax-rates) tax rate IDs:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Collecting a shipping address during checkout\n\nTo collect a shipping address from your customer during checkout, you need to create a `shipping_countries` doc in your `products` collection. This doc needs to have a field called `allowed_countries` which needs to be an array. In this array, add the country codes for the countries that you ship to. You can find a list of supported countries [here](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nSecondly, you need to add `collect_shipping_address: true` to the Checkout Session doc creation:\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n#### Setting metadata on the subscription\n\nYou can optionally set a metadata object with key-value pairs when creating the checkout session. This can be useful for storing additional information about the customer's subscription. This metadata will be synced to both the Stripe subscription object (making it searchable in the Stripe Dashboard) and the subscription document in the Cloud Firestore.\n\n```js\nconst docRef = await db\n  .collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser)\n  .collection('checkout_sessions')\n  .add({\n    price: 'price_1GqIC8HYgolSBA35zoTTN2Zl',\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: 'item001',\n    },\n  });\n```\n\n#### Adding multiple prices, including one-time setup fees\n\nIn addition to recurring prices, you can add one-time prices. These will only be on the initial invoice. This is useful for adding setup fees or other one-time fees associated with a subscription. To do so you will need to pass a `line_items` array instead:\n\n```js\nconst docRef = await db\n    .collection('${param:CUSTOMERS_COLLECTION}')\n    .doc(currentUser)\n    .collection('checkout_sessions')\n    .add({\n      line_items: [\n        {\n          price: 'price_1HCUD4HYgolSBA35icTHEXd5', // RECURRING_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n        {\n          price: 'price_1HEtgDHYgolSBA35LMkO3ExX', // ONE_TIME_PRICE_ID\n          quantity: 1,\n          tax_rates: ['txr_1HCjzTHYgolSBA35m0e1tJN5'],\n        },\n      ],\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n```\n\n**_NOTE_**: If you specify more than one recurring price in the `line_items` array, the subscription object in Cloud Firestore will list all recurring prices in the `prices` array. The `price` attribute on the subscription in Cloud Firestore will be equal to the first item in the `prices` array: `price === prices[0]`.\n\nNote that the Stripe customer portal currently does not support changing subscriptions with multiple recurring prices. In this case the portal will only offer the option to cancel the subscription.\n\n#### Start a subscription via the Stripe Dashboard or API\n\nSince version `0.1.7` the extension also syncs subscriptions that were not created via Stripe Checkout, e.g. via the [Stripe Dashboard](https://support.stripe.com/questions/create-update-and-schedule-subscriptions) or [via Elements and the API](https://stripe.com/docs/billing/subscriptions/fixed-price).\n\nIn order for this to work, Firebase Authentication users need to be synced with Stripe customer objects and the customers collection in Cloud Firestore (new configuration added in version `0.1.7`).\n\n#### Get the customer's subscription\n\nSubscription details are synced to the `subscriptions` sub-collection in the user's corresponding customer doc.\n\n```js\ndb.collection('${param:CUSTOMERS_COLLECTION}')\n  .doc(currentUser.uid)\n  .collection('subscriptions')\n  .where('status', 'in', ['trialing', 'active'])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, ' => ', doc.data());\n  });\n```\n\n#### Redirect to the customer portal\n\nOnce a customer is subscribed you should show them a button to access the customer portal to view their invoices and manage their payment & subscription details. When the user clicks that button, call the `createPortalLink` function to get a portal link for them, then redirect them.\n\n```js\nconst functionRef = firebase\n  .app()\n  .functions('${param:LOCATION}')\n  .httpsCallable('${function:createPortalLink.name}');\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n#### Delete User Data\n\nYou have the option to automatically delete customer objects in Stripe by setting the deletion option in the configuration to \"Auto delete\". In that case, when a user is deleted in Firebase Authentication, the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\nThe extension will not delete any data from Cloud Firestore. Should you wish to delete the customer data from Cloud Firestore, you can use the [Delete User Data](https://firebase.google.com/products/extensions/delete-user-data) extension built by the Firebase team.\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\nAccess the [Stripe dashboard](https://dashboard.stripe.com/) to manage all aspects of your Stripe account.\n\nEnjoy and please submit any feedback and feature requests on [GitHub](https://github.com/stripe/stripe-firebase-extensions/issues/new/choose)!\n","readmeContent":"# Web & Mobile Payments with Stripe\n\n**Author**: Stripe (**[https://stripe.com](https://stripe.com)**)\n\n**Description**: Controls access to paid content by syncing your subscriptions with Firebase Authentication.\n\n\n\n**Details**: Use this extension as a backend for your [Stripe](https://www.stripe.com/) payments.\n\nThe extension supports multiple use cases:\n\n- Process one-time payments with [Stripe Checkout](https://stripe.com/docs/payments/checkout) on the web.\n- Create subscriptions for your users and manage access control via Firebase Authentication.\n- Process payments & set up payment methods with the mobile payment sheet on [Android](https://stripe.com/docs/payments/accept-a-payment?platform=android&ui=payment-sheet), [iOS](https://stripe.com/docs/payments/accept-a-payment?platform=ios&ui=payment-sheet), or with [React Native](https://stripe.com/docs/payments/accept-a-payment?platform=react-native&ui=payment-sheet).\n\n#### Subscription payments with Stripe Checkout\n\nUsers can sign-up for your digital goods and paid content with Stripe Checkout and manage their subscriptions with the Stripe customer portal.\n\nThis extension syncs customers' subscription status with your Cloud Firestore and adds custom claims using Firebase Authentication for convenient access control in your application.\n\nThe design for Stripe Checkout and the customer portal can be customized in your Stripe Dashboard [branding settings](https://dashboard.stripe.com/settings/branding). See this example which is customized to match the Firebase color scheme:\n\n![Stripe Checkout Page](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-checkout.png)\n![Stripe Customer Portal](https://storage.googleapis.com/stripe-subscriptions-firebase-screenshots/firebase-stripe-subs-customer-portal.png)\n\n#### Recommended usage\n\nIf you're building on the web platform, you can use this extension for any of your payment use cases.\nYou can use the [`@stripe/firestore-stripe-payments`](https://github.com/stripe/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md)\nJavaScript package to easily access this extension from web clients. This client SDK provides\nTypeScript type definitions and high-level convenience APIs for most common operations client\napplications would want to implement using the extension.\n\nIf you're developing native mobile applications and you're selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store's in-app purchase APIs. See [Apple's](https://developer.apple.com/app-store/review/guidelines/#payments) and [Google's](https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&ref_topic=9857752) guidelines for more information. \n\nFor all other scenarios you can use the [stripe-android](https://github.com/stripe/stripe-android), [stripe-ios](https://github.com/stripe/stripe-ios), [stripe-react-native](https://github.com/stripe/stripe-react-native), or [flutter_stripe](https://github.com/flutter-stripe/flutter_stripe) SDKs.\n\n#### Additional setup\n\nBefore installing this extension, set up the following Firebase services in your Firebase project:\n\n- [Cloud Firestore](https://firebase.google.com/docs/firestore) to store customer & subscription details.\n  - Follow the steps in the [documentation](https://firebase.google.com/docs/firestore/quickstart#create) to create a Cloud Firestore database.\n- [Firebase Authentication](https://firebase.google.com/docs/auth) to enable different sign-up options for your users.\n  - Enable the sign-in methods in the [Firebase console](https://console.firebase.google.com/project/_/authentication/providers) that you want to offer your users.\n\nThen, in the [Stripe Dashboard](https://dashboard.stripe.com):\n\n- Create a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources, and read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n#### Billing\n\nThis extension uses the following Firebase services which may have associated charges:\n\n- Cloud Firestore\n- Cloud Functions\n- Firebase Authentication\n\nThis extension also uses the following third-party services:\n\n- Stripe Payments ([pricing information](https://stripe.com/pricing)) \n- Stripe Billing (when using subscriptions. [pricing information](https://stripe.com/pricing#billing-pricing))\n\nYou are responsible for any costs associated with your use of these services.\n\n#### Note from Firebase\n\nTo install this extension, your Firebase project must be on the Blaze (pay-as-you-go) plan. You will only be charged for the resources you use. Most Firebase services offer a free tier for low-volume use. [Learn more about Firebase billing.](https://firebase.google.com/pricing)\n\nStarting August 17 2020, you will be billed a small amount (typically less than $0.10) when you install or reconfigure this extension. See the [Cloud Functions for Firebase billing FAQ](https://firebase.google.com/support/faq#expandable-15) for a detailed explanation.\n\n\n\n**Configuration Parameters:**\n\n* Cloud Functions deployment location: Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).\n\n* Products and pricing plans collection: What is the path to the Cloud Firestore collection where the extension should store Stripe pricing plans?\n\n* Customer details and subscriptions collection: What is the path to the Cloud Firestore collection where the extension should store Stripe customer details? This can be the location of an existing user collection, the extension will not overwrite your existing data but rather merge the Stripe data into your existing `uid` docs.\n\n* Sync new users to Stripe customers and Cloud Firestore: Do you want to automatically sync new users to customer objects in Stripe? If set to 'Sync', the extension will create a new customer object in Stripe and add a new doc to the customer collection in Firestore when a new user signs up via Firebase Authentication. If set to 'Do not sync' (default), the extension will create the customer object \"on the fly\" with the first checkout session creation.\n\n* Automatically delete Stripe customer objects: Do you want to automatically delete customer objects in Stripe?  When a user is deleted in Firebase Authentication or in Cloud Firestore and set to 'Auto delete'  the extension will delete their customer object in Stripe which will immediately cancel all subscriptions for the user.\n\n* Stripe API key with restricted access: What is your Stripe API key?  We recommend creating a new [restricted key](https://stripe.com/docs/keys#limit-access) with write access only for the \"Customers\", \"Checkout Sessions\" and \"Customer portal\" resources. And read-only access for the \"Subscriptions\" and \"Prices\" resources.\n\n* Stripe webhook secret: This is your signing secret for a Stripe-registered webhook.  This webhook can only be registered after installation. Leave this value untouched during installation, then follow the  postinstall instructions for registering your webhook and configuring this value.\n\n\n\n**Cloud Functions:**\n\n* **createCustomer:** Creates a Stripe customer object when a new user signs up.\n\n* **createCheckoutSession:** Creates a Checkout session to collect the customer's payment details.\n\n* **createPortalLink:** Creates links to the customer portal for the user to manage their payment & subscription details.\n\n* **handleWebhookEvents:** Handles Stripe webhook events to keep subscription statuses in sync and update custom claims.\n\n* **onUserDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the user is deleted in Firebase Authentication.\n\n* **onCustomerDataDeleted:** Deletes the Stripe customer object and cancels all their subscriptions when the customer doc in Cloud Firestore is deleted.\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* firebaseauth.admin (Reason: Allows the extension to set custom claims for users.)\n\n* datastore.user (Reason: Allows the extension to store customers & subscriptions in Cloud Firestore.)\n","externalServices":[{"name":"Stripe","pricingUri":"https://stripe.com/pricing"}],"displayName":"Run Payments with Stripe","events":[{"type":"com.stripe.v1.product.created","description":"Occurs whenever a product is created."},{"type":"com.stripe.v1.product.updated","description":"Occurs whenever a product is updated."},{"type":"com.stripe.v1.product.deleted","description":"Occurs whenever a product is deleted."},{"type":"com.stripe.v1.price.created","description":"Occurs whenever a price is created."},{"type":"com.stripe.v1.price.updated","description":"Occurs whenever a price is updated."},{"type":"com.stripe.v1.price.deleted","description":"Occurs whenever a price is deleted."},{"type":"com.stripe.v1.checkout.session.completed","description":"Occurs when a Checkout Session has been successfully completed."},{"type":"com.stripe.v1.checkout.session.async_payment_succeeded","description":"Occurs when a payment intent using a delayed payment method finally succeeds."},{"type":"com.stripe.v1.checkout.session.async_payment_failed","description":"Occurs when a payment intent using a delayed payment method fails."},{"type":"com.stripe.v1.customer.subscription.created","description":"Occurs whenever a customer is signed up for a new plan."},{"type":"com.stripe.v1.customer.subscription.updated","description":"Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active)."},{"type":"com.stripe.v1.customer.subscription.deleted","description":"Occurs whenever a customer's subscription ends."},{"type":"com.stripe.v1.tax_rate.created","description":"Occurs whenever a new tax rate is created."},{"type":"com.stripe.v1.tax_rate.updated","description":"Occurs whenever a tax rate is updated."},{"type":"com.stripe.v1.invoice.paid","description":"Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band."},{"type":"com.stripe.v1.invoice.payment_succeeded","description":"Occurs whenever an invoice payment attempt succeeds."},{"type":"com.stripe.v1.invoice.payment_failed","description":"Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method."},{"type":"com.stripe.v1.invoice.upcoming","description":"Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings."},{"type":"com.stripe.v1.invoice.marked_uncollectible","description":"Occurs whenever an invoice is marked uncollectible."},{"type":"com.stripe.v1.invoice.payment_action_required","description":"Occurs whenever an invoice payment attempt requires further user action to complete."},{"type":"com.stripe.v1.payment_intent.processing","description":"Occurs when a PaymentIntent has started processing."},{"type":"com.stripe.v1.payment_intent.succeeded","description":"Occurs when a PaymentIntent has successfully completed payment."},{"type":"com.stripe.v1.payment_intent.canceled","description":"Occurs when a PaymentIntent is canceled."},{"type":"com.stripe.v1.payment_intent.payment_failed","description":"Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/memory","label":"Function memory","type":"SELECT","description":"How much memory should be allocated to each v1 function?","options":[{"value":"128","label":"128MB"},{"value":"256","label":"256MB"},{"value":"512","label":"512MB"},{"value":"1024","label":"1GB"},{"value":"2048","label":"2GB"},{"value":"4096","label":"4GB"},{"value":"8192","label":"8GB"}],"default":"256","advanced":true}]},"state":"PUBLISHED","hash":"0b93e995c99a88c06e2e62795f3bdee2dce1e49f9f019658eb604437613fb446","createTime":"2023-03-20T10:54:19.923313Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/0b93e995c99a88c06e2e62795f3bdee2dce1e49f9f019658eb604437613fb446","id":"0.3.3","releaseNotes":"[fix] Address issue where `insertInvoiceRecord` function fails. [#511]\n","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"2900"}}
[info] i  extensions: ensuring required API secretmanager.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:21.522Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/secretmanager.googleapis.com [none]
[debug] [2023-09-13T15:35:21.522Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/secretmanager.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:22.059Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/secretmanager.googleapis.com 200
[debug] [2023-09-13T15:35:22.060Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/secretmanager.googleapis.com [omitted]
[info] +  extensions: required API secretmanager.googleapis.com is enabled 
[info] i  extensions: ensuring required API compute.googleapis.com is enabled... 
[debug] [2023-09-13T15:35:22.060Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/compute.googleapis.com [none]
[debug] [2023-09-13T15:35:22.060Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/compute.googleapis.com x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:22.550Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/compute.googleapis.com 200
[debug] [2023-09-13T15:35:22.551Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/route-manager-5f65b/services/compute.googleapis.com [omitted]
[info] +  extensions: required API compute.googleapis.com is enabled 
[debug] [2023-09-13T15:35:22.551Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b [none]
[debug] [2023-09-13T15:35:22.794Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b 200
[debug] [2023-09-13T15:35:22.794Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/route-manager-5f65b {"projectId":"route-manager-5f65b","projectNumber":"286820515500","displayName":"routeworks-prod","name":"projects/route-manager-5f65b","resources":{"hostingSite":"route-manager-5f65b","storageBucket":"route-manager-5f65b.appspot.com","locationId":"us-central"},"state":"ACTIVE","etag":"1_2a7fe1fb-18c8-4649-98f4-61c3fb7c3426"}
[debug] [2023-09-13T15:35:22.794Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:getIamPolicy [none]
[debug] [2023-09-13T15:35:23.154Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:getIamPolicy 200
[debug] [2023-09-13T15:35:23.154Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:getIamPolicy {"version":1,"etag":"BwYEvt2bXzo=","bindings":[{"role":"roles/appengine.serviceAgent","members":["serviceAccount:service-286820515500@gcp-gae-service.iam.gserviceaccount.com"]},{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:286820515500@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-xrd0w@route-manager-5f65b.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-286820515500@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/cloudscheduler.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-cloudscheduler.iam.gserviceaccount.com"]},{"role":"roles/compute.serviceAgent","members":["serviceAccount:service-286820515500@compute-system.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-286820515500@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/datastore.importExportAdmin","members":["serviceAccount:route-manager-5f65b@appspot.gserviceaccount.com"]},{"role":"roles/datastore.user","members":["serviceAccount:ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:286820515500-compute@developer.gserviceaccount.com","serviceAccount:286820515500@cloudservices.gserviceaccount.com","serviceAccount:route-manager-5f65b@appspot.gserviceaccount.com"]},{"role":"roles/eventarc.eventReceiver","members":["serviceAccount:286820515500-compute@developer.gserviceaccount.com"]},{"role":"roles/eventarc.publisher","members":["serviceAccount:ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com"]},{"role":"roles/eventarc.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-eventarc.iam.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-286820515500@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-xrd0w@route-manager-5f65b.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:ext-firestore-stripe-payments@route-manager-5f65b.iam.gserviceaccount.com","serviceAccount:firebase-adminsdk-xrd0w@route-manager-5f65b.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-286820515500@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firebasestorage.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-firebasestorage.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-286820515500@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-xrd0w@route-manager-5f65b.iam.gserviceaccount.com","serviceAccount:service-286820515500@gcp-sa-pubsub.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:ducttapemasterJ@gmail.com","user:routeworksllc@gmail.com"]},{"role":"roles/run.invoker","members":["serviceAccount:286820515500-compute@developer.gserviceaccount.com"]},{"role":"roles/run.serviceAgent","members":["serviceAccount:service-286820515500@serverless-robot-prod.iam.gserviceaccount.com"]},{"role":"roles/storage.admin","members":["serviceAccount:firebase-adminsdk-xrd0w@route-manager-5f65b.iam.gserviceaccount.com"]}]}
[debug] [2023-09-13T15:35:23.154Z] Compute Service API Agent IAM policy OK
[info] The following extension instances will be configured:
	firestore-stripe-payments (stripe/firestore-stripe-payments@0.3.3)

[debug] [2023-09-13T15:35:23.155Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-09-13T15:35:23.155Z] > authorizing via signed-in user (routeworksllc@gmail.com)
[debug] [2023-09-13T15:35:23.155Z] [iam] checking project route-manager-5f65b for permissions ["firebase.projects.get","firebaseextensions.instances.update"]
[debug] [2023-09-13T15:35:23.155Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions [none]
[debug] [2023-09-13T15:35:23.155Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions x-goog-quota-user=projects/route-manager-5f65b
[debug] [2023-09-13T15:35:23.155Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.update"]}
[debug] [2023-09-13T15:35:23.332Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions 200
[debug] [2023-09-13T15:35:23.332Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/route-manager-5f65b:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.update"]}
[debug] [2023-09-13T15:35:23.333Z] Checking if latest AppDeveloper TOS has been accepted by route-manager-5f65b...
[info] i  extensions: By installing an extension instance onto a Firebase project, you accept the Firebase Extensions User Terms of Service: https://firebase.google.com/terms/extensions/user 
[debug] [2023-09-13T15:35:23.333Z] >>> [apiv2][query] GET https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos [none]
[debug] [2023-09-13T15:35:23.825Z] <<< [apiv2][status] GET https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos 200
[debug] [2023-09-13T15:35:23.825Z] <<< [apiv2][body] GET https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos {"name":"projects/route-manager-5f65b/appdevtos","lastAcceptedVersion":"v1","lastAcceptedTime":"2023-09-08T21:57:29.849864Z","latestTosVersion":"v1"}
[debug] [2023-09-13T15:35:23.825Z] User Terms of Service aready accepted on project route-manager-5f65b.
[debug] [2023-09-13T15:35:23.825Z] >>> [apiv2][query] POST https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos:accept [none]
[debug] [2023-09-13T15:35:23.825Z] >>> [apiv2][body] POST https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos:accept {"name":"project/route-manager-5f65b/appdevtos","instanceId":"firestore-stripe-payments","version":"v1"}
[debug] [2023-09-13T15:35:24.449Z] <<< [apiv2][status] POST https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos:accept 200
[debug] [2023-09-13T15:35:24.450Z] <<< [apiv2][body] POST https://firebaseextensionstos-pa.googleapis.com/v1/projects/route-manager-5f65b/appdevtos:accept {"name":"projects/route-manager-5f65b/appdevtos","lastAcceptedVersion":"v1","lastAcceptedTime":"2023-09-13T15:35:23.562331Z","latestTosVersion":"v1"}
[debug] [2023-09-13T15:35:24.450Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases pageSize=10&pageToken=
[debug] [2023-09-13T15:35:24.921Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases 200
[debug] [2023-09-13T15:35:24.921Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases {"releases":[{"name":"projects/route-manager-5f65b/releases/cloud.firestore","rulesetName":"projects/route-manager-5f65b/rulesets/e5d27029-3586-47ee-9ee1-6d793c7f2765","createTime":"2022-09-12T22:02:21.088461Z","updateTime":"2023-09-08T21:57:42.447752Z"},{"name":"projects/route-manager-5f65b/releases/firebase.storage/route-manager-5f65b.appspot.com","rulesetName":"projects/route-manager-5f65b/rulesets/ea86aa22-ef94-4ce9-bcd9-1db9f0a1923a","createTime":"2022-09-13T01:10:42.491868Z","updateTime":"2023-09-08T21:57:42.037440Z"}]}
[debug] [2023-09-13T15:35:24.928Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/ea86aa22-ef94-4ce9-bcd9-1db9f0a1923a [none]
[debug] [2023-09-13T15:35:25.423Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/ea86aa22-ef94-4ce9-bcd9-1db9f0a1923a 200
[debug] [2023-09-13T15:35:25.423Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/ea86aa22-ef94-4ce9-bcd9-1db9f0a1923a [omitted]
[info] i  storage: latest version of storage.rules already up to date, skipping upload... 
[info] i  firestore: deploying indexes... 
[debug] [2023-09-13T15:35:25.425Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases pageSize=10&pageToken=
[debug] [2023-09-13T15:35:25.426Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2023-09-13T15:35:25.862Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/indexes 200
[debug] [2023-09-13T15:35:25.863Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/route-manager-5f65b/databases/(default)/collectionGroups/audit_customers/indexes/CICAgOjXh4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"cust_id","order":"ASCENDING"},{"fieldPath":"timestamp","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY"},{"name":"projects/route-manager-5f65b/databases/(default)/collectionGroups/audit_logs/indexes/CICAgJiUpoMK","queryScope":"COLLECTION","fields":[{"fieldPath":"cust_id","order":"ASCENDING"},{"fieldPath":"timestamp","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY"}]}
[debug] [2023-09-13T15:35:25.863Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2023-09-13T15:35:25.919Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases 200
[debug] [2023-09-13T15:35:25.919Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/releases {"releases":[{"name":"projects/route-manager-5f65b/releases/cloud.firestore","rulesetName":"projects/route-manager-5f65b/rulesets/e5d27029-3586-47ee-9ee1-6d793c7f2765","createTime":"2022-09-12T22:02:21.088461Z","updateTime":"2023-09-08T21:57:42.447752Z"},{"name":"projects/route-manager-5f65b/releases/firebase.storage/route-manager-5f65b.appspot.com","rulesetName":"projects/route-manager-5f65b/rulesets/ea86aa22-ef94-4ce9-bcd9-1db9f0a1923a","createTime":"2022-09-13T01:10:42.491868Z","updateTime":"2023-09-08T21:57:42.037440Z"}]}
[debug] [2023-09-13T15:35:25.919Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/e5d27029-3586-47ee-9ee1-6d793c7f2765 [none]
[debug] [2023-09-13T15:35:26.146Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/e5d27029-3586-47ee-9ee1-6d793c7f2765 200
[debug] [2023-09-13T15:35:26.146Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/route-manager-5f65b/rulesets/e5d27029-3586-47ee-9ee1-6d793c7f2765 [omitted]
[info] i  firestore: latest version of firestore.rules already up to date, skipping upload... 
[debug] [2023-09-13T15:35:26.428Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2023-09-13T15:35:26.428Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/route-manager-5f65b/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/route-manager-5f65b/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}}]}
[info] i  firestore: The following indexes are defined in your project but are not present in your firestore indexes file:
	(audit_customers) -- (cust_id,ASCENDING) (timestamp,ASCENDING) 
	(audit_logs) -- (cust_id,ASCENDING) (timestamp,ASCENDING)  
